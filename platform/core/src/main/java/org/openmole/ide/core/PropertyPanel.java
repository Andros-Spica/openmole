/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PropertyPanel.java
 *
 * Created on 20 avr. 2011, 11:20:26
 */
package org.openmole.ide.core;

import java.awt.Component;
import java.awt.Container;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import org.openmole.ide.core.palette.PaletteElementFactories;
import org.openmole.ide.core.palette.PaletteElementFactory;
import org.openmole.ide.core.properties.PanelUI;
import org.openmole.ide.core.properties.IFactoryUI;
import org.openmole.ide.core.properties.NativeFactories;
import org.openmole.ide.core.workflow.model.IEntityUI;
import scala.collection.JavaConversions;
import scala.collection.JavaConversions.*;

/**
 *
 * @author mathieu
 */
public class PropertyPanel extends javax.swing.JPanel {

    boolean newMode = false;

    /** Creates new form PropertyPanel */
    public PropertyPanel() {
        initComponents();
        typeComboBox.setRenderer(new ItemRenderer());
        setEditGraphicalContext(false);
        entityPanelScrollPane.setVisible(false);
    }

    public void displayCurrentEntity(IEntityUI entity) {
        JPanel p = (JPanel)entity.panel();
        nameTextField.setText(entity.name());
        typeComboBox.removeAllItems();
        typeComboBox.addItem(entity.coreClass().getSimpleName());
        typeComboBox.setEditable(false);
        entityPanelScrollPane.getViewport().removeAll();
        entityPanelScrollPane.setViewportView(p);
        entityPanelScrollPane.setVisible(true);
    }

    private String save() {
        if (newMode) {
            //  ((IFactoryUI) typeComboBox.getSelectedItem()).buildEntity(nameTextField.getText());
            PaletteElementFactories.addPrototypeElement(new PaletteElementFactory(nameTextField.getText(), ((IFactoryUI) typeComboBox.getSelectedItem())));
            MoleSceneTopComponent.getDefault().refreshPalette();
        }
        nameTextField.setEnabled(false);
        newMode = false;
        return "Edit";
    }

    private void setNewGraphicalContext() {
        newMode = true;
        nameTextField.setText("");
        setEditGraphicalContext(true);
        // nameTextField.setEnabled(true);
        //  editToggleButton.setEnabled(true);
        typeComboBox.setEditable(true);
    }

    private void setEditGraphicalContext(Boolean b) {
        nameTextField.setEnabled(b);
        editToggleButton.setText(b ? "Save" : save());
    }

    private void setButtons(Boolean b) {
        newToggleButton.setEnabled(b);
        editToggleButton.setEnabled(true);
        typeComboBox.removeAllItems();
        typeComboBox.setEditable(b);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        editToggleButton = new javax.swing.JToggleButton();
        typeComboBox = new javax.swing.JComboBox();
        newToggleButton = new javax.swing.JToggleButton();
        prototypeToggleButton = new javax.swing.JToggleButton();
        taskToggleButton = new javax.swing.JToggleButton();
        samplingToggleButton = new javax.swing.JToggleButton();
        environmentToggleButton = new javax.swing.JToggleButton();
        entityPanelScrollPane = new javax.swing.JScrollPane();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(PropertyPanel.class, "PropertyPanel.jLabel1.text")); // NOI18N

        nameTextField.setText(org.openide.util.NbBundle.getMessage(PropertyPanel.class, "PropertyPanel.nameTextField.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(PropertyPanel.class, "PropertyPanel.jLabel2.text")); // NOI18N

        editToggleButton.setText(org.openide.util.NbBundle.getMessage(PropertyPanel.class, "PropertyPanel.editToggleButton.text")); // NOI18N
        editToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editToggleButtonActionPerformed(evt);
            }
        });

        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        newToggleButton.setText(org.openide.util.NbBundle.getMessage(PropertyPanel.class, "PropertyPanel.newToggleButton.text")); // NOI18N
        newToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newToggleButtonActionPerformed(evt);
            }
        });

        prototypeToggleButton.setText(org.openide.util.NbBundle.getMessage(PropertyPanel.class, "PropertyPanel.prototypeToggleButton.text")); // NOI18N
        prototypeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prototypeToggleButtonActionPerformed(evt);
            }
        });

        taskToggleButton.setText(org.openide.util.NbBundle.getMessage(PropertyPanel.class, "PropertyPanel.taskToggleButton.text")); // NOI18N
        taskToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskToggleButtonActionPerformed(evt);
            }
        });

        samplingToggleButton.setText(org.openide.util.NbBundle.getMessage(PropertyPanel.class, "PropertyPanel.samplingToggleButton.text")); // NOI18N
        samplingToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samplingToggleButtonActionPerformed(evt);
            }
        });

        environmentToggleButton.setText(org.openide.util.NbBundle.getMessage(PropertyPanel.class, "PropertyPanel.environmentToggleButton.text")); // NOI18N
        environmentToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                environmentToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entityPanelScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(typeComboBox, 0, 262, Short.MAX_VALUE)
                                    .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(taskToggleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(prototypeToggleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(samplingToggleButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(editToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(newToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(environmentToggleButton))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {environmentToggleButton, prototypeToggleButton, samplingToggleButton, taskToggleButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(taskToggleButton)
                    .addComponent(prototypeToggleButton)
                    .addComponent(samplingToggleButton)
                    .addComponent(environmentToggleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel2)
                            .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(entityPanelScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editToggleButtonActionPerformed
        setEditGraphicalContext(editToggleButton.isSelected());
    }//GEN-LAST:event_editToggleButtonActionPerformed

    private void newToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newToggleButtonActionPerformed
        setNewGraphicalContext();
    }//GEN-LAST:event_newToggleButtonActionPerformed

    private void taskToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskToggleButtonActionPerformed
        setButtons(false);

    }//GEN-LAST:event_taskToggleButtonActionPerformed

    private void prototypeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prototypeToggleButtonActionPerformed
        setButtons(true);
        for (IFactoryUI pf : JavaConversions.asJavaIterable(NativeFactories.prototypeFactories())) {
            typeComboBox.addItem(pf);
        }
    }//GEN-LAST:event_prototypeToggleButtonActionPerformed

    private void samplingToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samplingToggleButtonActionPerformed
        setButtons(false);
    }//GEN-LAST:event_samplingToggleButtonActionPerformed

    private void environmentToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_environmentToggleButtonActionPerformed
        setButtons(true);
    }//GEN-LAST:event_environmentToggleButtonActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton editToggleButton;
    private javax.swing.JScrollPane entityPanelScrollPane;
    private javax.swing.JToggleButton environmentToggleButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JToggleButton newToggleButton;
    private javax.swing.JToggleButton prototypeToggleButton;
    private javax.swing.JToggleButton samplingToggleButton;
    private javax.swing.JToggleButton taskToggleButton;
    private javax.swing.JComboBox typeComboBox;
    // End of variables declaration//GEN-END:variables

    class ItemRenderer extends BasicComboBoxRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (value != null) {
                if (value.getClass().equals(IFactoryUI.class)) {
                IFactoryUI f = (IFactoryUI) value;
                setText(f.coreClass().getSimpleName());
                }
            }
            return this;
        }
    }
}
