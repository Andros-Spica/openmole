#!/bin/bash

function cd_or_die() {
  cd "$1" || (echo "Can't cd to $1" >&2; exit 3)
}

# Limit virtual memory on docker
export MALLOC_ARENA_MAX=4

CURDIR="${PWD}"

#REALPATH=$(readlink -f $0)
#LOCATION=$(dirname "$REALPATH")

#readlink -f does not work on mac, use alternate script
TARGET_FILE=$0

cd_or_die "$(dirname "${TARGET_FILE}")"
TARGET_FILE="$(basename "${TARGET_FILE}")"

# Iterate down a (possible) chain of symlinks
while [ -L "${TARGET_FILE}" ]
do
    TARGET_FILE="$(readlink "${TARGET_FILE}")"
    cd_or_die "$(dirname "${TARGET_FILE}")"
    TARGET_FILE="$(basename "${TARGET_FILE}")"
done

REALPATH=$TARGET_FILE
#end of readlink -f

LOCATION=$( cd_or_die "$(dirname "${REALPATH}")" ; pwd -P )
cd_or_die "$CURDIR"

MEM=${OPENMOLE_MEMORY:-"2G"}
# enable through command line arguments --debug and --debug-port
DEBUG_MODE=false
DEBUG_PORT=5005
FLAGS=()

JAVAVERSION=$(java -version 2>&1)

JVMFLAVOR=$(echo "$JAVAVERSION" | tail -1)
case "$JVMFLAVOR" in
  *64-Bit*) FLAGS+=("-XX:+UseCompressedOops");;
esac

JVMVERSION=$(echo "$JAVAVERSION" | grep version | rev | cut -d' ' -f1 | rev)
case "$JVMVERSION" in
  *1\.6\.*) echo "Your java version is too old"; exit 1;;
  *1\.7\.*) FLAGS+=("-XX:MaxPermSize=128M");;
esac

ARGS=()
SCRIPT_ARGS=()

function usage() {
cat <<EOF
Usage: $0 <[options]>
Options:
  -d   --debug          Enable remote debugging (for developers)
  -h   --help           Show this message
  -m   --mem=           Set OpenMOLE application's memory (default: --mem=${MEM})
  -p   --debug-port=    Set port for remote debugging (default: --debug-port=${DEBUG_PORT})
  -w   --workspace=     Set OpenMOLE application's workspace (default: --workspace=${HOME}/.openmole/$(hostname))
EOF
exit 0
}

# from http://stackoverflow.com/a/28466267/470341
while getopts dhm:w:p:-: arg; do
  case "${arg}" in
    d )  DEBUG_MODE=true ;;
    h )  usage ;;
    m )  MEM="${OPTARG}" ;;
    p )  DEBUG_PORT="${OPTARG}" ;;
    w )  WORKSPACE="${OPTARG}"; ARGS+=("--workspace"); ARGS+=("${WORKSPACE}") ;;
    - )  LONG_OPTARG="${OPTARG#*=}"
      case ${OPTARG} in
        debug    )    DEBUG_MODE=true ;;
        help     )    usage ;;
        mem=?*   )    MEM="${LONG_OPTARG}" ;;
        debug-port=?* )    DEBUG_PORT="${LONG_OPTARG}" ;;
        workspace=?*  )    WORKSPACE="${LONG_OPTARG}"; ARGS+=("--workspace"); ARGS+=("${WORKSPACE}") ;;
        usage | debug*   )    echo "No arg allowed for --${OPTARG} option" >&2; exit 2 ;;
        mem* | debug-port* | workspace*    )    echo "Missing arg for --${OPTARG} option" >&2; exit 2 ;;
        '' | * )        ARGS+=("$@"); break ;; # "--" terminates argument processing
      esac ;;
    * ) ARGS+=("${OPTARG}");;
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list

if [ ${DEBUG_MODE} == true ]; then
  FLAGS+=("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${DEBUG_PORT}")
fi

# Try to increase the max number of opened files
if [[ $(ulimit -S -n) -lt 4096 ]]; then ulimit -S -n 4096 2>/dev/null; fi

function run {
  mkdir -p "$HOME/.openmole/.tmp/"
  CONFIGDIR=$HOME/.openmole/.tmp/$(date +%s)_$RANDOM

  java -Xss2M -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Djava.security.egd=file:/dev/./urandom -Dosgi.locking=none -Dopenmole.location="${LOCATION}" -Dosgi.classloader.singleThreadLoads=true  -Dosgi.configuration.area="${CONFIGDIR}" "-Xmx${MEM}" "${FLAGS[@]}" \
     -XX:+UseG1GC -XX:CICompilerCount=2 -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:G1ConcRefinementThreads=2 \
     -cp "${LOCATION}/launcher/*" org.openmole.launcher.Launcher  --plugins "${LOCATION}/plugins/" --priority "logging" --run org.openmole.ui.Application --osgi-directory "${CONFIGDIR}" -- \
     "${ARGS[@]}" "${SCRIPT_ARGS[@]}"

  RET=$?
  rm -rf "${CONFIGDIR}"
}

run
while [[ $RET -eq 254 ]]; do
 SCRIPT_ARGS=("--no-browser")
 run
done

exit $RET
