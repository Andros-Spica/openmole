
@import org.openmole.site.tools._
@import org.openmole.site._


@p{Sensitivity Analysis }

    @p Typical Sensitivity analysis (in a simulation experiment  context) is the study of how the variation of an input
     affect the output(s) of a model.


@img(src := Resource.img.thumbnail_sensitivity.file, width:= "50%")

@br
@br

@h3{Prerequisites}

An embedded model in OpenMOLE (see Step 1 : Model)

@br



@h2{Variation of one input}

@p     The most simple case to consider is to observe the effect of a single input variation on a single output.

    This is achieved by using an @b{exploration task} , who will generate the sequence of values of an input, according to its
    boundaries values and a discretisation step.

@br

   @hl.openmole("""
val my_input = Val[Double]

val exploration =
 ExplorationTask(
   (my_input in (0.0 to 10.0 by 0.5))
  )""", name = "variation of 1 input in sensitivity")

@p

Sampling can also be performed via a @hl.code("UniformDistribution(maximum)"), that generates values uniformly
distributed between zero and the maximum provided argument.
Custom domains can be defined using transformations, as in the example below that generates values between -10 and + 10.

 @hl.openmole("""
val my_input = Val[Double]
val exploration = ExplorationTask(
    (my_input in (UniformDistribution[Double](max=20) take 100)).map(x => x -10)
)""", name = "uniform distribution in sensitivity")


If your input is one file among many,  or  a line among a CSV file, use the
@a("CSVSampling task", href := DocumentationPages.sampling.file)
and @a("FileSampling task", href := DocumentationPages.sampling.file)

@br
@br

@h2{Variation of several inputs}
@p

  Exploration can be performed on several inputs domains, using the @b{cartesian product} operator @b{x}.
The basic syntax to explore 2 inputs (i.e. every combination of 2 inputs values) is
   @hl.openmole("""

    val exploration =
        ExplorationTask (
          (i in (0 to 10 by 2)) x
          (j in (0.0 to 5.0 by 0.5)) )
      """, name = "cartesian product for sensitivity")


@h3{Different Types of inputs}
@br

The cartesian product operator can handle different data types :
 @hl.openmole("""
   val exploration =
     ExplorationTask (
       (i in (0 to 10 by 2)) x
       (j in (0.0 to 5.0 by 0.5)) x
       (k in List("Leonardo", "Donatello", "Raphaël", "Michelangelo")) x
       (l in (UniformDistribution[Long]() take 10)) x
       (m in (workDirectory / "dir").files().filter(f => f.getName.startsWith("exp") && f.getName.endsWith(".csv")))
     )
    """, name = "data on cartesian product sampling in sensitivity")

This task performs every combination between the 5 inputs i,j,k,l and m. It can handle several types of inputs :
Integer (i) , Double (j), Strings (k), Long (l), Files (m).

@br




@br

The UniformDistribution[T]() take 10 is a uniform sampling of 10 numbers of the Long type,
taken in the [Long.MIN_VALUE; Long.MAX_VALUE] domain of the Long native type.


@br
@br

Files are explored as items of a list.
 The items are gathered  by the @hl.code("files()") function applied  on the @hl.code("dir") directory,
 optionally filtered with any @hl.code("String => Boolean")  functions  such as
 @hl.code("""contains(), startswith(), endswith()""")


 (see  the @a("Java Class String Documentation", href:="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html")
 for more details)



@h3
    Higher Dimension spaces
@p

    Higher dimension spaces must be handled via specific methods of the literature, because otherwise cartesian product
    would be too memory consuming .
     OpenMOLE includes two of these methods: Sobol Sequence and Latin HyperCube, defined as specifications
     of the exploration task:

@br

 @h4{Latin Hypercube Sampling}


@hl.openmole("""

val i = Val[Double]
val j = Val[Double]

val my_LHS_sampling =
  ExplorationTask (
    LHS(
      100, // Number of points of the LHS
      i in Range(0.0, 10.0),
      j in Range(0.0, 5.0)
    )
  )
""", name = "lhs sampling in sensitivity")

@br

 @h4{Sobol Sequence}

@hl.openmole("""

val i = Val[Double]
val j = Val[Double]

val my_sobol_sampling =
  ExplorationTask (
    SobolSampling(
      100, // Number of points
      i in Range(0.0, 10.0),
      j in Range(0.0, 5.0)
    )
  )
""", name = "sobol sampling in sensitivity")


@h2{Real World Example}

the @hl.code("Fire.nlogo") model is a simple, one-parameter, simulation model that simulates fire propagation.
This model features a threshold value in its unique parameter domain, below which fire fails to burn the majority
 of the forest, and beyond which fire propagates and burn most of it.

@br


We will perform sensitivity analysis to make this threshold appear.


TODO est ce qu'il faut vaiment le faire ici ou faire un tuto dédié ?
TODO le faire d'abord et décider ensuite
