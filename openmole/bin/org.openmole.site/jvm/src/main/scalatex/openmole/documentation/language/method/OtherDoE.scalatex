@import org.openmole.site.stylesheet._
@import org.openmole.site._
@import org.openmole.site.tools._


@def variables = """
val density = Val[Double]
val seed = Val[Int]
val burned = Val[Double]
"""


@b{Design of Experiments} (DoE) is the art of setting up an experimentation. In a model simulation context,
it boils down to declare the inputs under study (most of the time, they're parameters) and the values they will take for a batch of several simulations, with the idea of revealing a property of the model (e.g. sensitivity).
Even if there are several state-of-the-art DoE methods implemented in OpenMOLE, we recommend to focus on OpenMOLE
new methods:  PSE, and Calibration and Profiles  which have been thought to improve the drawbacks of the classical methods.

@br
@br
@br
For higher dimension input space, specific statistics techniques ensuring low discrepency like @a("Latin Hypercube Sampling and SobolSequence", href:=Link.intern(shared.otherDoEMenu.LHSSobol)) are available.
@br
If you want to use design of experiments of your own you may also want to provide @a("a csv file with your samples" , href:=Link.intern(shared.otherDoEMenu.csvSampling)) to OpenMOLE.

@br
@sect{@shared.otherDoEMenu.csvSampling}
    You can inject your own sampling in OpenMOLE through a CSV file. Considering a CSV file like:

    @hl.highlight("""
    colD,  colFileName,    i
    0.7,    fic1,           8
    0.9,    fic2,           19
    0.8,    fic2,           19
    """, "plain")
    Here is an example of the @hl.highlight("CSVSampling","plain")  used in a simple workflow to sample values stored in a file  :
    @hl.openmole("""
    val i = Val[Int]
    val o = Val[Int]
    val d = Val[Double]
    val f = Val[File]

    //Only comma separated files with header are supported for now
    val s = CSVSampling("/path/to/a/file.csv") set (
      columns += i,
      columns += ("colD", d),
      fileColumns += ("colFileName", "/path/of/the/base/dir/", f),
      // comma ',' is the default separator, but you can specify a different one using
      separator := ','
    )

    //Defines the "model" task, here it just takes i as input
    val myModel =
      ScalaTask("val o = i * 2 ") set (
        inputs += i,
        outputs += (i,o)
      )

    // Define the exploration of myModel for various i values sampled in the file.
    val exploration = DirectSampling(
      evaluation = myModel hook ToStringHook() ,
      sampling = s
    )

    exploration

    """)
    @br
    In this example the column @b{i} in the CSV file is mapped to the variable @b{i} of OpenMOLE.
    The column name @b{colD} is mapped to the variable @b{d}. The column named @b{colFileName} is appended to the base directory
    "/path/of/the/base/dir/" and used as a file in OpenMOLE.
    As a sampling, the @hl.highlight("CSVSampling","plain") can directly be injected in an @hl.highlight("DirectSampling","plain") task. It will generate a different task for each entry in the file.


@sect{@shared.otherDoEMenu.LHSSobol }


    High dimension spaces must be handled via specific methods of the literature, because otherwise cartesian product  would be too memory consuming .
    OpenMOLE includes two of these methods: @b{Sobol Sequence} and @b{Latin Hypercube Sampling}, that can be passed as an argument to the @hl.highlight("DirectSampling","plain") task:

    @break

    @Resource.rawFrag(Resource.img.method.sobolLHSID)
    @br

    @b{Method scores:}
    @br

        These two methods perform allright in terms of Input Space Exploration (which is normal as they were built for that extent),
        anyhow, they are superior to uniform sampling or grid sampling, but share the same intrinsic limitations.
        There is no special way of handling Stochasticity of the model, out of standard replications.
        @br
        These methods are not expensive @i{per se} , it depends on the magnitude of the Input Space you want to be covered.


    @break

     @h3{Latin Hypercube Sampling}

The syntax of the LHS sampling is the following :
    @br
    @br

    @hl.openmole("""
    val i = Val[Double]
    val j = Val[Double]
    val values = Val[Array[Double]]

    val my_LHS_sampling =
        LHS(
          100, // Number of points of the LHS
          i in (0.0, 10.0),
          j in (0.0, 5.0),
          values in Vector((0.0, 1.0), (0.0, 10.0), (5.0, 9.0)) // Generate part of the LHS sampling inside the array of values
        )
    """, name = "lhs sampling in sensitivity")

    @br
     @h3{Sobol Sequence}
The syntax of the Sobol sequence sampling is the following :
    @br
    @br
    @hl.openmole("""
    val i = Val[Double]
    val j = Val[Double]
    val values = Val[Array[Double]]

    val my_sobol_sampling =
      SobolSampling(
        100, // Number of points
        i in (0.0, 10.0),
        j in (0.0, 5.0),
        values in Vector((0.0, 1.0), (0.0, 10.0), (5.0, 9.0)) // Generate part of the sobol sampling inside the array of values
      )
    """, name = "sobol sampling in sensitivity")

    @h3{Usage in DirectSampling tasks}

Once a sampling is defined, you can just add it to a @a("DirectSampling task", href:=DocumentationPages.DirectSampling.anchor(shared.directSamplingMenu.gridSampling)) , under the @hl.highlight("sampling", "plain") argument. For example, supposing you have already declared inputs, outputs, and a model taskcalled myModel, the sampling could be used like :


    @hl.openmoleNoTest("""
        val myExploration = DirectSampling(
          evaluation = myModel ,
          sampling = my_sobol_sampling,
          aggregation = mean
        )

        myExploration
        """)


@sect{@shared.otherDoEMenu.severalInputs }
    @p

      Sampling can be performed on several inputs domains as well as on @b{several input types}, using the @b{cartesian product} operator: @b{x}, introduced in the @a("grid sampling",href:=DocumentationPages.DirectSampling.anchor(shared.directSamplingMenu.gridSampling))  dedicated section.

    Here is an example, still supposing you have already defined a task used for evaluation called myModel:


     @hl.openmoleNoTest("""
       val i = Val[Int]
       val j = Val[Double]
       val k = Val[String]
       val l = Val[Long]
       val m = Val[File]

       val exploration =
         DirectSampling (
         evaluation = myModel,
         sampling =
           (i in (0 to 10 by 2)) x
           (j in (0.0 to 5.0 by 0.5)) x
           (k in List("Leonardo", "Donatello", "RaphaÃ«l", "Michelangelo")) x
           (l in (UniformDistribution[Long]() take 10)) x
           (m in (workDirectory / "dir").files().filter(f => f.getName.startsWith("exp") && f.getName.endsWith(".csv")))
         )
        """)
    @br
    DirectSampling performs every combination between the 5 inputs of various types: Integer (i) , Double (j), Strings (k), Long (l), Files (m).

    @br
    @br
    The UniformDistribution[T]() take 10 is a uniform sampling of 10 numbers of the Long type,
    taken in the [Long.MIN_VALUE; Long.MAX_VALUE] domain of the Long native type.

    @br
    @br

    Files are explored as items of a list.
     The items are gathered  by the @hl.code("files()") function applied  on the @hl.highlight("dir","plain") directory,
     optionally filtered with any @hl.code("String => Boolean")  functions  such as  @hl.highlight("contains(), startswith(), endswith()", "plain")


     (see  the @a("Java Class String Documentation", href:= shared.link.javaString)
     for more details)


    @br
        If your input is one file among many,  or  a line among a CSV file, use the
        @a("CSVSampling task", href := Link.intern(shared.otherDoEMenu.csvSampling))
        and @a("FileSampling task", href := DocumentationPages.dataProcessing.anchor(shared.dataProcessingMenu.setOfFiles)).




@sect{@shared.otherDoEMenu.sensitivityAnalysis }
    @p Typical Sensitivity analysis (in a simulation experiment  context) is the study of how the variation of an input
    affect the output(s) of a model. Basically it

    @img(src := Resource.img.method.sensitivityAnim.file, stylesheet.center(80))

    @basicButton("Run", classIs(btn ++ btn_danger))(id := shared.sensitivity.button, stylesheet.svgRunButton(10))


    @break

    @h3{Prerequisites}

    An embedded model in OpenMOLE (see Step 1 : Model)

    @br



    @h2{Variation of one input}

    @p     The most simple case to consider is to observe the effect of a single input variation on a single output.

        This is achieved by using an @b{exploration task} , who will generate the sequence of values of an input, according to its
        boundaries values and a discretisation step.

    @br

       @hl.openmole("""
    val my_input = Val[Double]

    val exploration =
     ExplorationTask(
       (my_input in (0.0 to 10.0 by 0.5))
      )""", name = "variation of 1 input in sensitivity")


    @br



@sect{@shared.otherDoEMenu.sensitivityFireModel }
    @p
    the @hl.highlight("Fire.nlogo", "plain") model is a simple, one-parameter, simulation model that simulates fire propagation.
    This model features a threshold value in its unique parameter domain, below which fire fails to burn the majority
    of the forest, and beyond which fire propagates and burn most of it.
    We will perform sensitivity analysis to make this change of regime appear.

    The Fire model integration has been covered in the @a("NetLogo page of the Model section", href:= DocumentationPages.netLogo.file), so we take it from here.

    The former script was already performing a sensitivity Analysis, by varying density from 20 to 80 by step of 10, with 10 replication for each (seed is taken 10 times).
    @br
    In our case, the quantum of 10 percent is quite coarsed, so we make it 1 percent :

    @hl.openmole("""
    val exploration =
      ExplorationTask(
        (density in (20.0 to 80.0 by 1.0)) x
        (seed in (UniformDistribution[Int]() take 10))
      )
      """, header=variables)
    @break
    This is the resulting scatterplot of Number of burned trees according to density varying from 20% to 80% by 1% steps.
    @br@br
    @img(src := Resource.img.method.densityBurned.file, stylesheet.center(80))

    @br
    The change of regime clearly appears between 50% and 75% percent density, so we are going to take a closer look at this domain: we change the exploration task to have the density taken from 50% to 75% by step of 0.1%, still with 10 replications:
    @br
    @hl.openmole("""
        val exploration =
          ExplorationTask(
            (density in (50.0 to 75.0 by 0.1)) x
            (seed in (UniformDistribution[Int]() take 10))
          )
          """, header=variables)

    @break

    This gives us the following scatter plot, where we added an "estimator" (or predictor)  curve (geom_smooth() from @a("ggplot2 R library", href:=shared.link.ggplot2) to be precise) that acts like a floating estimator in the collection of points, giving the statistical tendency of the Y-Axis values of points along the X-axis.

    @br@br
    @img(src := org.openmole.site.Resource.img.method.densityBurnedZoom.file, stylesheet.center(80))

    @br


That's pretty cool already ! The estimator gives us a nice sigmoÃ¯d shape on which we could find the mid point, the steepness of the curve and so on, to better characterize the phenomenon.
@break
 Eventually, let's have a look at the stochasticity of the model. Looking at the plot, we see that there is a lot of variation possible, especially in the transition zone,  around 60% density.
 Let's make a final exploration Task to investigate the variation of model outputs for several replications of the same parameterization.
 We now take densities within [50;70] and take 100 replications for each:


  @hl.openmole("""
         val exploration =
           ExplorationTask(
             (density in (50.0 to 70.0 by 0.1)) x
             (seed in (UniformDistribution[Int]() take 100))
           )""", header= variables)




@br

We obtain the following results, displayed as boxplots every percent (but results are obtained for every 0.1% density) to emphasize on the variations.


    @br@br

    @img(src := Resource.img.method.densitySeedBox.file, stylesheet.center(80))


@br
    As we can see, stochasticity has an high effect right in the middle of the transition of regime, reaching maximum at 54%.
    Another interesting thing to investigate what would be the density from which the fire propagates to the end of the zone (right side of NetLogo World). A slight modification of the model code would do the trick (hint:
    @hl.highlight("any? patches with-max [pxcor] ... ","plain") would be a good starting point :-) but we let you do it on your own (any successful attempt would win the right to be displayed right here ! )


@p
    For completeness sake, here is the R code snippet to produce plots from your results file (RSutdio version 1.0.153, ggplot2 version 2.2.1)


    @hl.highlight("""
        library(ggplot2)
        setwd("~/dev/DocOpenMoleSensitivity/")

        df <- read.csv("result.csv")
        dfzoom <- read.csv("resultZoom.csv")
        dfzoomSeed <- read.csv("resultZoomSeed.csv")


        #scatterplot
        p <- ggplot(df, aes(x=density, y=burned)) +
               geom_point(colour="#4096c5") +
          ggtitle("Burned trees according to initial Density, with predictor curve and booxplots")+
          ylab("burned trees")+
          theme(panel.background = element_rect(fill = "grey90"))
        p

        #scatter + estimator
        pp <- ggplot(dfzoom, aes(x=density, y=burned)) +
          geom_point(colour="#4096c5") +
          geom_smooth(colour="#ff5900")+
          ggtitle("Burned trees according to initial Density, with predictor curve and booxplots")+
          ylab("burned trees")+
          theme(panel.background = element_rect(fill = "grey90"))
        pp

        #boxplot every percent
        ppp <- ggplot(dfzoomSeed, aes(x=density, y=burned, group=density)) +
          geom_boxplot((aes(group = cut_width(density, 1))), outlier.alpha=0.2,colour="#4096c5", outlier.color = "#ff5900")+
          ggtitle("Stochasticity : Boxplots every percent")+
          ylab("burned trees")+
          scale_x_continuous(breaks=seq(50,70,5), minor_breaks = seq(50,70,1))+
          theme(panel.background = element_rect(fill = "grey90"))
        ppp
    ""","R")







