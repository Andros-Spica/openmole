
@import org.openmole.site._
@import org.openmole.site.tools._

Data processing often revolves about massive computation using big bunch of files.


Model inputs come in many shapes; this is why OpenMOLE features some file exploration functions to manipulate your datasets as easily as possible.

@h2{Exploring a set of files}

OpenMOLE introduces the concept of @b{Domains} as a variable ranging along a set of files. For instance, to run a program
over a set of files in a subdirectory you may use:

@hl.openmole("""
  val f = Val[File]

  DirectSampling(
    evaluation = myModel,
    sampling = f in (workDirectory / "dir"
  )""", header = "val myModel = EmptyTask()")

@br
To explore files located in several directories:
@hl.openmole("""
  val i = Val[Int]
  val f = Val[File]

  DirectSampling(
    evaluation =  myModel,
    sampling =
      (i in (0 to 10)) x
      (f in (workDirectory / "dir").files("subdir${i}", recursive = true).filter(f => f.isDirectory && f.getName.startsWith("exp")))
  )""", header = "val myModel = EmptyTask()")

@br
The @hl.openmoleNoTest{filter} modifier filters the initial file sampling according to a predicate.
You can filter using any function taking a @hl.openmoleNoTest{File} and producing a @hl.openmoleNoTest{Boolean} (see the corresponding @a("javadoc", href := shared.link.javaFile) or create your own). Some predicate functions available out of the box are @hl.highlight("startsWith(), contains(), endsWith() ", "plain").
@br
@hl.openmole("""
  val f = Val[File]

  DirectSampling(
    evaluation = myModel,
    sampling = (f in (workDirectory / "dir") filter(_.getName.endsWith(".nii.gz")) )
  )""", header = "val myModel = EmptyTask()")

@br
Searching in deep file trees can be very time consuming and irrelevant in some cases where you know how your data is organised.
 By default the file selector only explores the direct level under the directory you've passed as a parameter.
 If you want it to explore the whole file tree, you can set the option recursive to true as in @hl.highlight("files(recursive = true)", "plain").

@break

If you wish to select one single file for each value of i you may use the @hl.highlight("select", "plain") operation:
@hl.openmole("""
  val i = Val[Int]
  val f = Val[File]

  DirectSampling(
    evaluation = myModel,
    sampling =
      (i in (0 to 10)) x
      (f in (workDirectory / "dir").files("subdir${i}", recursive = true).filter(f => f.isDirectory && f.getName.startsWith("exp")))
  )""", header = "val myModel = EmptyTask()")

@h2{Files vs Paths}

As its name suggests, the @hl.openmoleNoTest{files} selector manipulates @hl.highlight("File", "plain") instances and directly injects them in the dataflow.

@p If you plan to delegate your workflow to a @aa("local cluster environment", href :=  DocumentationPages.cluster.file) equipped with a shared file system across all nodes, you don't need data to be automatically copied by OpenMOLE.


@p In this case, you might prefer the paths selector instead.
Paths works exactly like files and accept the very same options.
The only difference between the two selectors is that @hl.openmoleNoTest{paths} will inject @hl.highlight("Path","plain") variables in the dataflow.



@p @b{Path describes a file's location but not its content}.
The @b{explored files won't be automatically copied by OpenMOLE when using @hl.openmoleNoTest{Path}}, so this @b{does not fit a grid environment} for instance.
@br

@p @hl.openmole("""
  import java.nio.file.Path

  val dataDir     = "/vol/vipdata/data/HCP100"

  val subjectPath = Val[Path]
  val subjectID   = Val[String]

  DirectSampling(
    evaluation = myModel,
    sampling = subjectPath in File(dataDir).paths(filter=".*\\.nii.gz") withName subjectID
  )""", header = "val myModel = EmptyTask()")

@p More details on the difference between manipulating @hl.openmoleNoTest{Files} and @hl.openmoleNoTest{Paths} can be found in the dedicated entry of the @aa("FAQ", href:= Pages.faq.file + "#WhenshallIusePathoverFile?").

@h2{More examples}

You can find full examples using OpenMOLE's capabilities to process a dataset in the following entries of the marketplace:
@ul
    @li
        @a("FSL-Fast", href := shared.link.repo.market + "/tree/8-dev/fsl-fast")
    @li
        @a("Random Forest", href := shared.link.repo.market + "/tree/8-dev/randomforest")

@h2{Going further}

Files can also be injected in the dataflow through @a("Sources", href := DocumentationPages.source.file). They provide more powerful file filtering possibilities using regular expressions and can also target directories only.
