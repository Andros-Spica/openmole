@import org.openmole.site.stylesheet._
@import org.openmole.site._
@import org.openmole.site.tools._
@import DocumentationPages._



@def variables = """
val density = Val[Double]
val seed = Val[Int]
val burned = Val[Double]
"""

@def gridSampling = "Grid Sampling"
@def csvSampling = "CSV Sampling"
@def severalInputs = "Exploration of several inputs"
@def advancedSampling = "Advanced sampling"


@h2{@csvSampling}

You can inject your own sampling in OpenMOLE through a CSV file. Considering a CSV file like this:

@hl.highlight("""
colD,  colFileName,    i
0.7,    fic1,           8
0.9,    fic2,           19
0.8,    fic2,           19
""", "plain")
Here is an example of the @hl.highlight("CSVSampling","plain")  used in a simple workflow to sample values stored in a file  :
@hl.openmole("""
val i = Val[Int]
val o = Val[Int]
val d = Val[Double]
val f = Val[File]

val s = CSVSampling("/path/to/a/file.csv") set (
  columns += i,
  columns += ("colD", d),
  fileColumns += ("colFileName", "/path/of/the/base/dir/", f),
  // comma ',' is the default separator, but you can specify a different one using
  separator := ','
)

//Defines the "model" task, here it just takes i as input
val myModel =
  ScalaTask("val o = i * 2 ") set (
    inputs += i,
    outputs += (i,o)
  )

// Define the exploration of myModel for various i values sampled in the file.
val exploration = DirectSampling(
  evaluation = myModel hook ToStringHook() ,
  sampling = s
)

exploration

""")
@br
In this example the column @b{i} in the CSV file is mapped to the variable @b{i} of OpenMOLE.
The column name @b{colD} is mapped to the variable @b{d}. The column named @b{colFileName} is appended to the base directory
"/path/of/the/base/dir/" and used as a file in OpenMOLE.
As a sampling, the @hl.highlight("CSVSampling","plain") can directly be injected in an @hl.highlight("DirectSampling","plain") task. It will generate a different task for each entry in the file.