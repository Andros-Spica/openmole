@import org.openmole.site.stylesheet._
@import org.openmole.site._
@import org.openmole.site.tools._
@import DocumentationPages._



@def variables = """
val density = Val[Double]
val seed = Val[Int]
val burned = Val[Double]
"""

@def gridSampling = "Grid Sampling"
@def csvSampling = "CSV Sampling"
@def severalInputs = "Exploration of several inputs"
@def advancedSampling = "Advanced sampling"


@h2{Sobol Sequence}

High dimension spaces must be handled via specific methods of the literature, because otherwise cartesian product  would be too memory consuming .
OpenMOLE includes two of these methods: @b{Sobol Sequence} and @b{Latin Hypercube Sampling}, that can be passed as an argument to the @hl.highlight("DirectSampling","plain") task:

@break

@Resource.rawFrag(Resource.img.method.sobolLHSID)
@br

@b{Method scores}
@br

    These two methods perform allright in terms of Input Space Exploration (which is normal as they were built for that extent),
    anyhow, they are superior to uniform sampling or grid sampling, but share the same intrinsic limitations.
    There is no special way of handling Stochasticity of the model, out of standard replications.
    @br
    These methods are not expensive @i{per se} , it depends on the magnitude of the Input Space you want to be covered.


@break

@h3{Sobol Sequence}
The syntax of the Sobol sequence sampling is the following :
@br
@br
@hl.openmole("""
val i = Val[Double]
val j = Val[Double]
val values = Val[Array[Double]]

val my_sobol_sampling =
  SobolSampling(
    100, // Number of points
    i in (0.0, 10.0),
    j in (0.0, 5.0),
    values in Vector((0.0, 1.0), (0.0, 10.0), (5.0, 9.0)) // Generate part of the sobol sampling inside the array of values
  )
""", name = "sobol sampling in sensitivity")

@h3{Usage in DirectSampling tasks}

Once a sampling is defined, you can just add it to a @a("DirectSampling task", href:= anchor(gridSampling)) , under the @hl.highlight("sampling", "plain") argument. For example, supposing you have already declared inputs, outputs, and a model taskcalled myModel, the sampling could be used like :


@hl.openmoleNoTest("""
    val myExploration = DirectSampling(
      evaluation = myModel ,
      sampling = my_sobol_sampling,
      aggregation = mean
    )

    myExploration
    """)