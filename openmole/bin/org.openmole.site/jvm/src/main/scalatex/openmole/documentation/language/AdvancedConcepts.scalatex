@import org.openmole.site.stylesheet._
@import org.openmole.site.Resource._
@import org.openmole.site._
@import org.openmole.site.tools._
@import org.openmole.site.Environment._


@h1{Advanced concepts}
OpenMOLE has a lot of handy features that allows the familiar user to tune the workflow of execution into much more details
that previously described in the @a("Model", href:=DocumentationPages.model.file) and @a("Method",
href:=DocumentationPages.model.file) sections.

We present here the relevant elements of the OpenMOLE framework:

@sect{OpenMOLE technical concepts}
    Fine-tune  your workflow using the elements of the OpenMOLE language :
    @br
    @ul
        @li
            In OpenMOLE, transitions link tasks with each other. Here are presented several kinds of @aa("Transitions", href := DocumentationPages.transition.file) available in OpenMOLE
        @li
            Model tasks are represented as functions, taking arguments, and producing outputs. The @aa("Hook", href := DocumentationPages.hook.file) mechanism helps to make side effects on them (like displaying outputs, storing them in files, etc)
        @li

        @li
            The @aa("Sources", href := DocumentationPages.source.file) permit to inject data in the data-flow


@sect{Development Documentation}

    @b{Plugin development}

    @br

    Develop your own plugin to have full control over your code - OpenMOLE integration: @a("Plugin", href := DocumentationPages.plugin.file)

    @break

    @b{Server Version and REST API }

    @br

    Command your OpenMOLE server from within your own app: @a("Web server and REST API", href := DocumentationPages.webserver.file)

    @break

    @b{Console mode}
    @br
    The OpenMOLE scripts can also be copy - paste interactively in a @aa("console", href := DocumentationPages.console.file)



