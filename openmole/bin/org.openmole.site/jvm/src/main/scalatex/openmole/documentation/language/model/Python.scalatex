
@import org.openmole.site.tools._
@import org.openmole.site._
@import org.openmole.site.NativeDocPageCommons._



@introPackagingForRPythonCplusplus
@hr

@sect{Embedding a Python script}

    @p The toy Python script for this test case is:
    @br @hl.highlight("""
    import sys
    f = open(sys.argv[2], 'w')
    f.write(sys.argv[1])
    exit(0)""", "python")

    @p This script is saved to @i{hello.py}. We first package it using CARE:
    @br @hl.highlight("""care -o hello.tgz.bin python hello.py 42 test.txt""", "plain")

    @p We can now run it in OpenMOLE using the following script:
    @br @hl.openmole("""
    // Declare the variable
    val arg = Val[Int]
    val output = Val[File]

    // python task
    val pythonTask =
      CARETask(workDirectory / "hello.tgz.bin", "python hello.py ${arg} output.txt") set (
        inputs += arg,
        outputFiles += ("output.txt", output),
        outputs += arg
      )

    val exploration = ExplorationTask(arg in (0 to 10))

    val copy = CopyFileHook(output, workDirectory / "hello${arg}.txt")
    val env = LocalEnvironment(4)
    exploration -< (pythonTask hook copy on env by 2)""")

    @p Notions from OpenMOLE are reused in this example. If you're not too familiar with @a("Environments", href := DocumentationPages.environment.file), @a("Groupings", href := DocumentationPages.environment.file + "#Grouping"), @a("Hooks", href := DocumentationPages.hook.file) or @a("Samplings", href := DocumentationPages.advancedSampling.file), check the relevant sections of the documentation.

    @hr
    @NativeDocPageCommons.footer