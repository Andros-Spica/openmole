@import org.openmole.site.tools._
@import org.openmole.site._
@import org.openmole.site.content.Native._



@h2{RTask}

R is a scripted language initially designed for statistics, but which application range is much broader today (for example GIS, operational research, linear algebra, web applications, etc.).
, thanks to its large community and the variety of packages. It may be convenient to use some specific R libraries within a workflow, and OpenMOLE provides therefore a specific @i{RTask}.

@h2{Preliminary remark}

@linuxOnly("RTask")


@h2{RTask syntax}

@p The @code{RTask} relies on an underlying @code{ContainerTask} but is designed to be transparent and takes only R-related arguments.
The current version of R used is @b{@shared.rTask.rVersion}.
It takes the following arguments :

@ul
   @li{@code{script} : String, mandatory. The R script to be executed.}
   @li{@code{install} : Sequence of strings, optional (default = empty). The commands to be executed prior to any R packages installation and R script execution (see example below : some R libraries may have system dependencies, that have to be installed first).}
   @li{@code{libraries} : Sequence of strings, optional (default = empty). The name of R libraries that will be used by the script and need to be installed before (note : as detailed below, installations are done only at the first use, and OpenMOLE keeps the docker image in cache. To force an update, use the @i{forceUpdate} argument)}
   @li{@code{forceUpdate} : Boolean, optional (default = false). Should the library installation be forced (to ensure an update for example). If true, the task will perform the installation (and thus the update) even if the library was already installed.}

@p It has the following specific properties to be extended using @code{set} :

@ul
   @li{@code{rInputs} : correspondences between workflow variables in input and R variables (add couples @i{(Val,String)})}
   @li{@code{rOutputs} : correspondences between R variables and workflow variables in output (add couples @i{(String,Val)}}

@p We develop below a detailed example of how to use a RTask, from a very simple use to a more elaborate with system libraries and R libraries.



@h2{Simple RTask}

The toy R script for this first test case is:

@br
@hl("""
    f = function(x){
          x+1
        }
    j = f(2)""", "R")

@p We save this to @code{Rscript1.R}, it will be used in the second part.
Here we create a function @code{f}, and a variable @code{j} in which we
store the result of the evaluation of the function.

@br For this first script example, we write the R script directly in the Rtask. We will see below how to
import it from a @code{file.R}, deal with libraries, and plug inputs and outputs between OpenMOLE and R.

@br @openmole(s"""
    val rTask1 =
     RTask($tq
       # Here you write code in R
       f = function(x){
             x+1
           }
       j = f(2)
       $tq)

    rTask1""" )




@h2{Running a script from a file}

@p You can now upload @code{Rscript1.R} to your OpenMOLE workspace.

@br Here is the OpenMOLE script to use it in the Rtask. In the @code{resource} of the Rtask is set, you have to precise the location
of the @code{file.R}, which is then imported in the R script using the R primitive @code{source()}).


@br @openmole( s"""
    val rTask2 =
      RTask($tq
        source("Rscript1.R")
      $tq) set(
        resources += workDirectory / "Rscript1.R"
      )

    rTask2
    """)

@h2{Input and output values}

In this script we want to pass the OpenMOLE variable @code{i} to the Rtask. It is possible through an @code{input}
in the @code{set} of the task.

@br In practise, @code{i} can be a variable whose value is given by a previous task, here we set it manually to 3.

@br Remark : here the OpenMOLE variable has the same name as the R variable @code{i}, but it is mandatory as we will see below.


@br @openmole( s"""
  val i = Val[Int]

  val rTask3 =
    RTask($tq
      f = function(x){
            x+1
          }
      j = f(i)
    $tq) set (
      rInputs += i,
      i := 3
    )

    rTask3
      """)



@p In the script below (@code{rTask4}), we add an output variable @code{j}, and we change the name of the R variable (now @code{varRi})
which is mapped to the OpenMOLE variable @code{i}.


@br @openmole( s"""

  val i = Val[Int]
  val j = Val[Int]

  val rTask4 =
    RTask($tq
      f= function(x){
           x+1
         }
      j = f(varRi)
    $tq) set(
      rInputs += (i, "varRi"),
      rOutputs += j,
      i := 3
    )


  rTask4 hook ToStringHook()
   """)


@p Remark : if you have several outputs, they can be managed following two cases:

@ul
  @li{if they have the same name as OpenMole variables and R variables, pass them as a list in @code{rInputs}:}

     @br @openmole(s"""
        val c = Val[Double]
        val d = Val[String]
        val e = Val[Array[Double]]

        rInputs += (c,d,e)
      """)


  @li{if they have different name as OpenMole variables and R variables, use several @code{rInputs("Rvariable", OMvariable)}:}

     @br @openmole(s"""
     val aOM = Val[Double]
     val bOM = Val[Double]

     rInputs += (aOM, "a_R")
     rInputs += (bOM, "b_R")
     """)

@p Note that you can combine @code{rOutputs} with classic @code{outputs}
that come not in the R task (for example, the variable @i{c} in @i{rTask5} below).



      @br @openmole( s"""
           val i = Val[Int]
           val j = Val[Double]
           val c = Val[Double]

           val rTask5 =
             RTask($tq
               f = function(x){
                     x+1
                   }
               j = f(i)
               $tq) set (
                 rInputs += i,
                 (inputs, outputs) += c,
                 rOutputs += ("j", j),
                 outputs += i ,
                 i := 3 ,
                 c:=2
               )
           rTask5 hook ToStringHook()
           """)



@p This technique can be used when you have a chain of tasks and you want to use a hook. Indeed, the hook only captures outputs
 of the last task, thus we can add a variable of interest in the output of the task even if it does not appear in this task.
Note that the last section present an alternative.




@h2{Working with files}

It is also possible to pass files as argument of the @code{rTask}. However, we can't pass them with @i{rInputs} as seen before, as it will result in a type mismatch with an error message like  @i{type class java.io.File is not convertible to JSON}.


@br We thus use @i{inputFiles}, and  we give an illustration in the following workflow (@code{rTask}). We precise that @code{inputFiles} must be used here (and not @code{resources}), since it is used as a @code{Val} and can be acted upon in a workflow, whereas @code{resources} acts differently since it is fixed.

@br We have first a @code{ScalaTask} which writes numbers in a file. The file is the OpenMole variable  @code{g} of type @i{java.io.File } .
 In order to have access to this file in the RTask, we put @code{g} as output of the ScalaTask.

@br The R script in the RTask reads a file named @code{fileForR} (in the R script presented here, it is supposed to have numeric values, separated by a simple space),
and creates a R variable @code{temp2}, which is a vector containing the value of the file @code{fileForR}. We then apply the function
@code{f} to that vector.  The end of the workflow simply tells OpenMOLE to chain the two tasks and to display outputs of the
last task (here the OpenMOLE  variable @code{resR}).

@p Remark that the @code{g} is an openMole variable. If you want to see the file created in your workspace, you can use a
@aa("hooks", href := DocumentationPages.hook.file). Note that you have to put @code{g} as an output of the RTask (see the
 section "A complete workflow", below to have a workflow example).


@br @openmole( s"""
   val g = Val[File]

   val task1 =
     ScalaTask($tq
       val g = newFile()
       g.content = "3 6 4"
     $tq) set (
       outputs += g
     )

   /////////////////////////////

   val resR =  Val[Array[Double]]

   val rTask =
     RTask($tq
       temp1=read.table("fileForR", sep="")
       temp2=as.vector(temp1,mode = "numeric")

       f= function(x) {
            x+1
           }
       k=f(temp2)
     $tq) set(
       inputFiles += (g, "fileForR"),
       rOutputs += ("k", resR)
     )

   (task1 -- rTask ) hook ToStringHook(resR)
   """)

@h2{Use a library}

@p Here we give an example of how to use a library in a RTask. We use the function @code{CHullArea} of
the library @code{GeoRange} to compute the area in the convex envelop of a set of points.

@br Write the names of the libraries you need in the field @code{libraries}, and adapt the @code{install} field accordingly. The @code{install} argument is a sequence of system commands that are executed prior to the installation of the R libraries.
It can be used to install the packages which are required by the R libraries. The R task is based on a debian container, therefore you can use any debian command here including @code{apt} installation tool.

@br The @code{libraries} argument is a sequence of libraries that are installed from the CRAN repository.

@p Remark : the first time you use R with @code{libraries} or @code{packages}, it takes some time to install them, but for the next uses
those libraries will be stored, and the execution is quicker.


@br @openmole( s"""
    val area = Val[Double]

    val rTask3 =
      RTask($tq
        library(GeoRange)
        n=40
        x = rexp(n, 5)
        y = rexp(n, 5)

        # to have the convex envelopp of the set of points we created
        liste = chull(x,y)
        hull <- cbind(x,y) [liste,]

        #require GeoRange
        area=CHullArea(hull[,1],hull[,2])
        $tq,
        install = Seq("apt update", "apt install -y libgdal-dev libproj-dev"),
        libraries = Seq("GeoRange")
      ) set(
        rOutputs += area
      )

    rTask3 hook ToStringHook()
    """)


@h2{A complete worflow}


Here is an example of an (almost complete) workflow using a Rtask, it uses @code{rInputs, inputFiles , install} (you can add your R script using  @code{resource})

@br The two first tasks are ScalaTask whose aim is to create OpenMOLE variables
that will be used in the RTask.

@br  @i{task1} creates a file @code{g} and @code{task2} creates @code{y}, an @code{Array[Double]}. We both put them in the @code{Rtask} using
respectively @code{inputFiles} and @code{rInputs}.

@br Remark that the conversion from the OpenMOLE type (scala) @code{Array[Double]} to the R type vector is made directly by the @code{rInputs}

@br The hook stored the file @code{g} in your @b{Workspace}, and display the @code{area}


@br @openmole( s"""
    //////  Create a file for the Rtask

    val n = Val[Int]
    val g = Val[File]

    val task1 =
      ScalaTask($tq
       import org.apache.commons.math3.distribution._
       import scala.util.Random

       val dist_Unif = new UniformRealDistribution()
       val dist1=  List.fill(n)(dist_Unif.sample()).mkString(" ")

       val g = newFile()
       g.content = dist1
       $tq) set (
         inputs += n ,
         n := 10 ,
         outputs += (g, n)
       )


       //////  Create a variable for the Rtask
       val y =  Val[Array[Double]]

       val task2 =
         ScalaTask($tq
           import org.apache.commons.math3.distribution._
           val dist_Unif = new UniformRealDistribution()
           val y =  List.fill(n)(dist_Unif.sample()).toArray
         $tq) set (
            inputs += (n,g),
            outputs += (y,n,g)
         )

    //////////////////////////

    val res =  Val[Double]

    val rTask =
      RTask($tq
        library(GeoRange)

        # Read the file created by the first scala task
        temp1=read.table("fileForR", sep="")
        x=as.vector(temp1,mode = "numeric")

        # y is the variable created in the second task

        # requiered for the function CHullArea
        liste = chull(x,y)
        hull <- cbind(x,y) [liste,]

        #require GeoRange
        area=CHullArea(hull[,1],hull[,2])

        $tq,
        install = Seq("apt update", "apt install -y libgdal-dev libproj-dev"),
        libraries = Seq("GeoRange")
        ) set(
          inputs += n ,
          inputFiles += (g, "fileForR"),
          rInputs += (y, "y"),  // same as  rInputs += (y)
          rOutputs += ("area", res),
          outputs += (g,n)
        )


    val h1 = CopyFileHook(g, workDirectory / "random_points.txt")

    (task1 -- task2 -- rTask ) hook (h1,ToStringHook(res,n) )
    """)


@h2{Remarks about the workflow}


Here is an example of the workflow which avoids passing all the arguments in @code{ inputs / outputs}, when you don't need them in the intermediary task. It uses @i{slot} and @i{capsule}.

@br @openmole(s"""
val a = Val[Int]
val b = Val[Int]
val j = Val[Int]
val res = Val[Int]

val task1 =
  ScalaTask($tq
    val b = a+1
  $tq) set (
    inputs += a ,
    a := 10 ,
    outputs += (b,a)
  )


val task2 =
  ScalaTask($tq
    val j = b + 2
  $tq) set (
    inputs += b,
    outputs += (j)
  )


val task3 =
  ScalaTask($tq
    val res = b + a + j
  $tq) set (
    inputs += (a, b, j),
    outputs += res
  )


val objSlot = Slot(task3)  // we create a slot over the task3
val task1Capsule = Capsule(task1)


((task1Capsule --  objSlot) & (task1Capsule -- task2 -- objSlot)) hook ToStringHook()
 """)

Remark that @code{a} is not an @code{output} of the @code{task2}, and if you try a classical chain @code{task1 -- task2 -- task3}, OpenMOLE will inform you that:
  @plain("""
  Input (a: Int) is missing when reaching the slot270273838:task3-1057250483.
  """)

