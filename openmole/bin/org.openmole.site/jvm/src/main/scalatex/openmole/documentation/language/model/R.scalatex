@import org.openmole.site.tools._
@import org.openmole.site._


@h2{Preliminary remark}

The @code("RTask") works only on Linux systems. If you are running OpenMOLE on a different system you won't be able to use it. This limitation may be overcome in the future when docker is installed on MacOS and Windows.

@h2{Simple RTask}

The toy R script for this first test case is:

@br
@hl("""
    f = function(x){
          x+1
        }
    j = f(2)""", "R")

@p We save this to @i{Rscript1.R}, it will be used in the second part.
Here we create a function @i{f}, and a variable @i{j} in which we
store the result of the evalution of the function by 2.

@br We use an Rtask in OpenMOLE to run this R script. In the RTsak we write code in R !

@br For this first OpenMOLE  script, we write the R script in the Rtask, we will see after how to
import it from a @i{file.R}, and deal with libraries.  Moreover, this Rtask does not communicate with other
variables in the workflow, and we just executes the R script .
We will see in the sections below how to input and output OpenMOLE variables in the Rtask.


@br @openmole(s"""
    val rTask1 =
     RTask($tq
       # Here you write code in R
       f = function(x){
             x+1
           }
       j = f(2)
       $tq)

    rTask1""" )


The toy R script for this first test case is:

    @br
    @hl("""
        f = function(x){
              x+1
            }
        j = f(2)""", "R")

    @p We save this to @i{Rscript1.R}, it will be used in the second part.
    Here we create a function @i{f}, and a variable @i{j} in which we
    store the result of the evalution of the function by 2.

    @br We use an Rtask in OpenMOLE to run this R script. In the RTsak we write code in R !

    @br For this first OpenMOLE  script, we write the R script in the Rtask, we will see after how to
    import it from a @i{file.R}, and deal with libraries.  Moreover, this Rtask does not communicate with other
    variables in the workflow, and we just executes the R script .
    We will see in the sections below how to input and output OpenMOLE variables in the Rtask.


    @br @openmole(s"""
        val rTask1 =
         RTask($tq
           # Here you write code in R
           f = function(x){
                 x+1
               }
           j = f(2)you have to
           $tq)

        rTask1""" )

@h2{Upload your script}

You can now upload @i{Rscript1.R} to your OpenMOLE workspace.

Here is the OpenMOLE script to use it in the Rtask. In the @i{resource} of the Rtask'set, you have to precise the location
of the @i{file.R} (imported in the R script thanks to @i{source()}).


@br @openmole( s"""
    val rTask2 =
      RTask($tq
        source("Rscript1.R")
      $tq) set(
        resources += workDirectory / "Rscript1.R"
      )

    rTask2
    """)

@h2{Input and output values}

In this script we want to pass the OpenMOLE variable @i{i} to the Rtask. It is possibble through an @i{input}
in the @i{set} of the task.

@br In practise, @i{i} can be a variable whose value is given by a previous task, here we set in manually to 3.

@br Remark : here the OpenMOLE variable has the same name as the R variable @i{i}, but it is not an obligation as seen after.


@br @openmole( s"""
  val i = Val[Int]

  val rTask3 =
    RTask($tq
      f = function(x){
            x+1
          }
      j = f(i)
    $tq) set (
      rInputs += i,
      i := 3
    )

    rTask3
      """)



@p  In the script below (@i{rTask4}), we add an output variable @i{j}, and we change the name of the R variable (now @i{varRi})
that is map to the OpenMOLE variable @i{i}.


@br @openmole( s"""

  val i = Val[Int]
  val j = Val[Int]

  val rTask4 =
    RTask($tq
      f= function(x){
           x+1
         }
      j = f(varRi)
    $tq) set(
      rInputs += (i, "varRi"),
      rOutputs += j,
      i := 3
    )


  rTask4 hook ToStringHook()
   """)


@p Remark : if you have several outputs, two cases :

@ul
  @li{if they have the same name as OpenMole variables and R variables, pass them as a list in @i{rInputs}:}

     @br @openmole(s"""
        val c = Val[Double]
        val d = Val[String]
        val e = Val[Array[Double]]

        rInputs += (c,d,e)
      """)


  @li{if they have different name as OpenMole variables and R variables, use several @code{rInputs("Rvariable", OMvariable)}:}

     @br @openmole(s"""
     val aOM = Val[Double]
     val bOM = Val[Double]

     rInputs += ("a_R", aOM )
     rInputs += ("b_R", bOM)
     """)

@p Remark that variables in the rOutputs are directly store in the output, but you can add outputs
that are not in the R task (for example, the variable @i{c} in @i{rTask5} below).



      @br @openmole( s"""
           val i = Val[Int]
           val j = Val[Double]
           val c = Val[Double]

           val rTask5 =
             RTask($tq
               f = function(x){
                     x+1
                   }
               j = f(i)
               $tq) set (
                 rInputs += i,
                 (inputs, outputs) += c,
                 rOutputs += ("j", j),
                 outputs += i ,
                 i := 3 ,
                 c:=2
               )
           rTask5 hook ToStringHook()
           """)



@p This technique can be used when you have a chain of tasks and you want to use a hook. Indeed, the hook only concerns outputs
 of the last task, thus we can add a variable of interest in the output of the task even if it does not appear in this task (also
  think to add those variables as inputs). Note that the last section present an alternative




@h2{Working with files}

It is also possible to pass file as argument of the rTask. However, we can't pass them with @i{rInputs} as seen before, otherwise
you have an error like  @i{type class java.io.File is not convertible to JSON}.


@br We thus use @i{inputFiles}, and  we give an illustration in the following workflow (@i{rTask}).

@br We have first a ScalaTask that writes numbers in a file. The file is the OpenMole variable  @i{g} of type @i{java.io.File } .
 In order to have access to this file in the RTask, we put  @i{g} as output of the ScalaTask.

@br The R script in the RTask read a file named @i{fileForR} (in the R script presented here, it is supposed to have numeric values, separated by a simple space),
and create a R variable @i{temp2}, which is a vector that contains the value of the file @i{fileForR}. We then apply the function
@i{f} to that vector.  The end of the workflow just asks OpenMOLE to chain the two tasks and to display the outputs of the
last task (here the OpenMOLE  variable @i{resR}).

@p Remark that the @i{g} is an openMole variable. If you want to see the file created in your workspace, you can use a
@aa("hooks", href := DocumentationPages.hook.file). Note that you have to put @i{g} as output of the RTask (see the
 section "A complete workflow", below to have a workflow example).


@br @openmole( s"""
   val g = Val[File]

   val task1 =
     ScalaTask($tq
       val g = newFile()
       g.content = "3 6 4"
     $tq) set (
       outputs += g
     )

   /////////////////////////////

   val resR =  Val[Array[Double]]

   val rTask =
     RTask($tq
       temp1=read.table("fileForR", sep="")
       temp2=as.vector(temp1,mode = "numeric")

       f= function(x) {
            x+1
           }
       k=f(temp2)
     $tq) set(
       inputFiles += (g, "fileForR"),
       rOutputs += ("k", resR)
     )

   (task1 -- rTask ) hook ToStringHook(resR)
   """)

@h2{Use a library}

Here we give an example of how to use a library in a RTask. We use the function @i{CHullArea} of
the library @i{GeoRange} to calculate the area of a set of points (the area of its convex envelop).

@br Write the names of the libraries you need in the field @i{libraries}, and the add the package in @i{install}. The @i{install} argument is a sequence of system commands that are executed prior to the installation of the R libraries. It can be used to install the packages which are requiered by the R libraries. The R task is based on a debian container, therefore you can use any debian command here including @i{apt} installation tool.

@br The @i{libraries} argument is a sequence of libraries that are installed from the CRAN repository.

@p Remark : the first time you use R with @i{libraries} or @i{packages}, it takes some time to install them, but for the next uses
those libraries will be stored, and the execution is quicker.


@br @openmole( s"""
    val area = Val[Double]

    val rTask3 =
      RTask($tq
        library(GeoRange)
        n=40
        x = rexp(n, 5)
        y = rexp(n, 5)

        # to have the convex envelopp of the set of points we created
        liste = chull(x,y)
        hull <- cbind(x,y) [liste,]

        #require GeoRange
        area=CHullArea(hull[,1],hull[,2])
        $tq,
        install = Seq("apt update", "apt install -y libgdal-dev libproj-dev"),
        libraries = Seq("GeoRange")
      ) set(
        rOutputs += area
      )

    rTask3 hook ToStringHook()
    """)


@h2{A complete worflow}


Here is an example of an (almost complete) workflow using a Rtask, it uses @i{rInputs, inputFiles , install} (you can add your R script using  @i{resource})

@br The two first tasks are ScalaTask whose aim is to create OpenMOLE variables
that will be used in the RTask.

@br  @i{task1} creates a file @i{g} and @i{task2} creates @i{y}, an @i{Array[Double]}. We both put them in the @i{Rtask} using
respectively @i{inputFiles} and @i{rInputs}.

@br Remark that the conversion from the OpenMOLE type (scala) @i{Array[Double]} to the R type vector is made directly by the @i{rInputs}

@br The hook stored the file @i{g} in your @b{Workspace}, and display the @i{area}


@br @openmole( s"""
    //////  Create a file for the Rtask

    val n = Val[Int]
    val g = Val[File]

    val task1 =
      ScalaTask($tq
       import org.apache.commons.math3.distribution._
       import scala.util.Random

       val dist_Unif = new UniformRealDistribution()
       val dist1=  List.fill(n)(dist_Unif.sample()).mkString(" ")

       val g = newFile()
       g.content = dist1
       $tq) set (
         inputs += n ,
         n := 10 ,
         outputs += (g, n)
       )


       //////  Create a variable for the Rtask
       val y =  Val[Array[Double]]

       val task2 =
         ScalaTask($tq
           import org.apache.commons.math3.distribution._
           val dist_Unif = new UniformRealDistribution()
           val y =  List.fill(n)(dist_Unif.sample()).toArray
         $tq) set (
            inputs += (n,g),
            outputs += (y,n,g)
         )

    //////////////////////////

    val res =  Val[Double]

    val rTask =
      RTask($tq
        library(GeoRange)

        # Read the file created by the first scala task
        temp1=read.table("fileForR", sep="")
        x=as.vector(temp1,mode = "numeric")

        # y is the variable created in the second task

        # requiered for the function CHullArea
        liste = chull(x,y)
        hull <- cbind(x,y) [liste,]

        #require GeoRange
        area=CHullArea(hull[,1],hull[,2])

        $tq,
        install = Seq("apt update", "apt install -y libgdal-dev libproj-dev"),
        libraries = Seq("GeoRange")
        ) set(
          inputs += n ,
          inputFiles += (g, "fileForR"),
          rInputs += (y,"y"),  // same as  rInputs += (y)
          rOutputs += ("area", res),
          outputs += (g,n)
        )


    val h1 = CopyFileHook(g, workDirectory / "random_points.txt")

    (task1 -- task2 -- rTask ) hook (h1,ToStringHook(res,n) )
    """)


@h2{Remark about the workflow}


Here is an example of the worflow that avoid passing all the arguments in @i{ inputs / outputs}, when you don't need them in the intermediary task. It uses @i{slot} and @i{capsule}.

@br @openmole(s"""
val a = Val[Int]
val b = Val[Int]
val j = Val[Int]
val res = Val[Int]

val task1 =
  ScalaTask($tq
    val b = a+1
  $tq) set (
    inputs += a ,
    a := 10 ,
    outputs += (b,a)
  )


val task2 =
  ScalaTask($tq
    val j = b + 2
  $tq) set (
    inputs += b,
    outputs += (j)
  )


val task3 =
  ScalaTask($tq
    val res = b + a + j
  $tq) set (
    inputs += (a,b,j),
    outputs += res
  )


val objSlot = Slot(task3)  // we create a slot over the task3
val task1Capsule = Capsule(task1)


((task1Capsule --  objSlot) & (task1Capsule -- task2 -- objSlot)) hook ToStringHook()
 """)

Remark that @i{a} is not an @i{output} of the @i{task2}, and if you try a classical chain @i{task1 -- task2 -- task3}, OpenMOLE will inform you that:
  @plain("""
  Input (a: Int) is missing when reaching the slot270273838:task3-1057250483.
  """)

