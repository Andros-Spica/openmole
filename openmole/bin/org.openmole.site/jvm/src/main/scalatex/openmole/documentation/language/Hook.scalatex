@import org.openmole.site._
@import org.openmole.site.tools._
@import org.openmole.site.stylesheet._
@import DocumentationPages._


@h2{What is a Hook?}

Tasks in OpenMOLE are mute pieces of software.
They are not conceived to write files, display values, or generally present any side effects at all.
The role of a task is to compute some output data from their input data.
That's what guarantees that their execution can be deported to other machines.

@br

OpenMOLE introduces a mechanism called @b{Hook} to save or display results generated during the execution of a workflow.
Hooks are conceived to perform an action on the outputs of the task they are plugged to.
Different hooks are available for different actions that need to be performed.


@h3{How to plug a hook to a task}

Let's consider this simple workflow:

@br@br

@hl.openmole("""
  // Define the variable i
  val i = Val[Int]

  // Define a task which returns its input value multiplied by 2
  val hello = ScalaTask("i = i * 2") set (
    inputs += i,
    outputs += i
  )

  // Define a Hook
  val h = DisplayHook()

  // Define an exploration task
  DirectSampling(
    evaluation = (hello hook h),
    sampling = i in (0 to 9)
  )
""", name = "plug a hook")

@br

The hook @code{h} is plugged to the end of the @code{hello} task, which means that every time @code{hello} finishes, the hook @code{h} is executed.
Here it means that the dataflow will be printed in the standard output, so all the output values for @code{i} will be displayed.


@h3{Plugging multiple hooks to the same task}

You can define as many hooks as you want in a workflow, and plug them to the same task or to different tasks.
See the following workflow:

@br@br

@hl.openmole("""
  val i = Val[Int]

  val hello = ScalaTask("val i = 2") set (
    outputs += i
  )

  val h1 = DisplayHook()
  val h2 = DisplayHook()
  val h3 = DisplayHook()

  (hello hook (h1, h2, h3))
""", name = "plug multiple hooks")

@br

Here the hooks @code{h1}, @code{h2}, and @code{h3} are all plugged to the @code{hello} task and will all be executed upon its completion.
However, we should point out that plugging the same hook multiple times to the same task is usually of limited interest...!



@h2{Default hooks}

Most OpenMOLE methods come with a default hook to save their results in a properly formatted file.
To use these embedded hooks, you can directly give the required arguments (@i{eg} the path of the created file) to the @code{hook} keyword.
For instance, in a direct sampling you can do:

@br@br

@hl.openmole("""
val i = Val[Int]

//Define the "myModel" task
val myModel =
  ScalaTask("val o = i * 2") set (
    inputs += i,
    outputs += (i, o)
  )

// Define the exploration task
DirectSampling(
  evaluation = myModel,
  sampling = i in (0 to 10 by 1)
) hook (workDirectory / "result.csv")
""", name="default hook")

@br

The result of the direct sampling will be saved in the file @i{result.csv}.



@h2{Hooks to write into files}
@h3{Write a string}

Any string can be appended to a file using the hook @code{AppendToFileHook}.
The appended string can be a combination of variables from the data flow and plain text.

@br@br

@hl.openmole("""
    val i = Val[Int]

    val h = AppendToFileHook("path/of/the/file.txt", "string ${i} to append")
""", name = "append to file hook")


@h3{Write an entire file}

@code{AppendToFileHook} can be used to write an entire file as well.

@br@br

@hl.openmole("""
    val file = Val[File]
    val i = Val[Int]

    val h = AppendToFileHook("${file.content}", "path/to/a/file/or/dir${i}.csv")
""", name = "append file to file hook")

@br

The path to the new file can be expanded using variables from the data flow (@code{i} here for instance).
The variables or expressions written between @b{${}} are evaluated and replaced with their value.


@h3{Write into a CSV file}

The hook @code{AppendToCSVFileHook} takes data from the data flow and appends it to a file formatted as CSV.

@br@br

@hl.openmole("""
    val i = Val[Int]

    val h = AppendToCSVFileHook("path/to/a/file/or/dir${i}.csv")
""", name = "csv hook")

@br

Some additional optional parameters can be passed to the @code{AppendToCSVFileHook}:
@ul
   @li{@code{values = Seq(i, j)} specifies which variables from the data flow should be written in the file. The default behaviour when this list is not specified is to dump all the variables from the dataflow to the file.}
   @li{@code{header = "Col1, Col2, ColZ"} customises the header of the CSV file to be created with the string it receives as a parameter. Please note that this only happens if the file doesn't exist when the hook is executed.}
   @li{@code{arrayOnRow = true} forces the flattening of input lists such that all list variables are written to a single row/line of the CSV file.}

@hl.openmole("""
    val i = Val[Int]
    val j = Val[Array[Int]]

    val h = AppendToCSVFileHook("path/to/a/file/or/dir${i}.csv", values = Seq(i, j), header = "i, j", arrayOnRow = true)""", name = "csv hook with options")


@h3{Write a matrix into a file}

Some workflows may output two dimensional data, which can be understood as a matrix.
For this, the @code{MatrixHook} writes matrix-like data to a file.

@br@br

@hl.openmole("""
    val matrix = Val[Array[Array[Double]]]

    val h = MatrixHook("file.csv", matrix)
""")

@br

Output format will be a CSV file.
Data understood as matrix are one and two dimensional arrays of double, int and long.



@h2{Hook to copy a file}

The @code{CopyFileHook} makes it possible to copy a file or directory from the data flow to a given location on the machine running OpenMOLE.

@br@br

@hl.openmole("""
  val file = Val[File]
  val i = Val[Int]

  val h = CopyFileHook(file, "path/to/copy/the/file${i}.txt")
""", name = "copy file hook")



@h2{Hooks to display results}

@h3{Display variables}

To display a variable @code{i} from the workflow in the standard output, use the hook @code{DisplayHook(i)}:

@br@br

@hl.openmole("""
  val i = Val[Int]
  val j = Val[Int]

  val h = DisplayHook(i, j)
""", name = "to string hook")

@br

If no variable is specified in @code{DisplayHook()}, the whole data flow will be displayed.


@h3{Display strings}

To display a string in the standard output, use the @code{DisplayHook("string")}.
The string can be formed of plain text and/or variables.
You can think of the @code{DisplayHook} as an OpenMOLE equivalent to Scala's @code{println}.

@br@br

@hl.openmole("""
  val i = Val[Int]

  val h = DisplayHook("The value of i is ${i}.")
""", name = "display hook")



@h2{Conditional hooking}

You may want to filter outputs that are redirected to a hook, @i{i.e.} do conditional hooking.
You can use for that the @code{when} keyword, built from a hook and a condition:

@br@br

@hl.openmole("""
  val i = Val[Int]

  val display = DisplayHook("The value of i is ${i}.") when "i > 0"
  """, name = "condition hook")

@br

Decorators exist for a simpler syntax: @code{ConditionHook(myhook,mycondition)} is equivalent to @code{myhook when mycondition} and @code{myhook condition mycondition} (where the condition can be given as a condition or a string).
