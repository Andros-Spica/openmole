@import org.openmole.site.stylesheet._
@import org.openmole.site.Resource._
@import org.openmole.site._
@import org.openmole.site.tools._


While OpenMOLE's core code is not intended to be directly accessible to most users, an easy-to-use transparent and flexible API has
been developed for simple development of user extensions to the core. This API allows the user to implement new tasks, methods, samplings.


@h2{Concepts of the API}

The primitives for the API are imported by importing contents of package @code{org.openmole.core.dsl.extension}.

These primitive provide constructors for
@ul
  @li{tasks}
  @li{samplings}
  @li{hooks}


@h2{Task extensions}

To define a new task, use @code{Task(name: String)(process: FromContext => Context)}. What the task does is defined by the provided closure, which transforms a @code{FromContext} into a @code{Context}.

You can add implicits in your @code{apply} method to get advanced services (mole services, network services, etc.).

Validation is provided with the @code{validate} method which transforms validation parameters into a sequence of throwables.

For example

@hl.code("""
  object MyTask {
    def apply(taskparam: Double,taskval: Val[Double])(implicit moleService: MoleServices,workspace: Workspace, networkService: NetworkService) =
      Task("MyTask"){
        parameters =>
          // do something with from context parameters : here add a constant to a double prototype
          Context(taskval -> parameters.context(taskval) + taskparam)
      } validate {vp => vp.map{proto => if(proto.v < 0) new Throwable("double proto should be positive") }} set (
        (inputs,outputs) += (taskval)
      )
  }
""")



@h2{Sampling extensions}

To implement a sampling, the constructor @code{Sampling} takes a function transforming a @code{FromContext} into a sampling results,
which is an @code{Iterator[Iterable[Variable[_]]]}.

For example the following sampling assigns uniformally a sequence of doubles to some prototypes :

@hl.code("""
  object MySampling {
    def apply(values: FromContext[Array[[Double]]],prototypes: Val[_]*) = Sampling {
     p =>
      values.from(p.context).map{ value => prototypes.toList.map{ proto => Variable(proto,value)}}.toIterator
    } validate { _ => Seq.empty} inputs {prototypes} prototypes {prototypes}
  }
""")
