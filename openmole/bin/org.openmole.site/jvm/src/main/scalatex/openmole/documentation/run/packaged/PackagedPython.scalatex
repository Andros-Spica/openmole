
@import org.openmole.site.tools._
@import org.openmole.site._
@import org.openmole.site.content.Native._


@introPackagingForRPythonCplusplus
@hr

@h2{Embedding a Python script}

@p The toy Python script for this test case is:
@br @hl.highlight("""
import sys
f = open(sys.argv[2], 'w')
f.write(sys.argv[1])
exit(0)""", "python")

@p We save this to @i{hello.py}. It does nothing but printing its first argument to the file passed as a second argument.

@scriptsCommon("python", "python hello.py 42 test.txt")

@p You can now @b{upload this archive to your OpenMOLE workspace} and run it using the following script:
@br @hl.openmole("""
// Declare the variable
val arg = Val[Int]
val output = Val[File]

// python task
val pythonTask =
  CARETask(workDirectory / "hello.tgz.bin", "python hello.py ${arg} output.txt") set (
    inputs += arg,
    outputFiles += ("output.txt", output),
    outputs += arg
  )

val copy = CopyFileHook(output, workDirectory / "hello${arg}.txt")
val env = LocalEnvironment(4)

DirectSampling(
  evaluation = pythonTask,
  sampling = arg in (0 to 10)
) hook copy on env by 2""")

@p Notions from OpenMOLE are reused in this example. If you're not too familiar with @a("Environments", href := DocumentationPages.scale.file), @a("Groupings", href := DocumentationPages.scale.file + "#Grouping"), @a("Hooks", href := DocumentationPages.hook.file) or @a("Samplings", href := DocumentationPages.directSampling.file), check the relevant sections of the documentation.

@hr
@footer