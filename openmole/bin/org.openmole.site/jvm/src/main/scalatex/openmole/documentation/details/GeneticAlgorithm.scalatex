@import org.openmole.site.tools._
@import org.openmole.site._


@def model = """
  //model inputs
  val x = Val[Double]
  val y = Val[Double]
  //model outputs
  val o1 = Val[Double]
  val o2 = Val[Double]

  val model =
    ScalaTask("val o1 = x; val o2 = y") set (
      inputs += (x, y),
      outputs += (o1, o2)
    )
"""




@h1{Genetic Algorithms in OpenMOLE}

OpenMOLE make an intensive use of genetic algorithms (GA) in its various @a("methods", href:= DocumentationPages.method.file) : whereas it deals with model calibration (which is an optimization problem) or a diversity of outputs     research like in @a("PSE", href:= DocumentationPages.pse.file) (which boils down to Genetic algorithms with a novelty incentive).

    @br@br
    GAs can be smartly distributed on grid environments using @a("islands scheme", href:= DocumentationPages.island.file), and and be able to deal with model @a("stochasticity", href:=DocumentationPages.stochasticity.file) .










@sect{About Calibration and GA }
    OpenMOLE provides advanced methods to help you calibrate your model.
    These methods automatically generate workflows to explore your model's parameter space towards the best parameter
    set according to a previously defined @b{goal} (or @b{objective} or @b{criterion}) .
    This is commonly addressed in literature as a calibration/optimization methods.



    @p
    Calibration methods of OpenMOLE use Genetic Algorithms to explore the parameter space of a simulation model, looking for parameter sets that will produce outputs  that reach one or several given @b{objectives}.

    @b{Objectives functions},also called @b{fitness functions}, compute quantities from model outputs that have to be minimized or maximized ; they're a quantification of the characteristics of what is the @i{optimal model output} according to what  you're looking for.

    @br@br

    One common use case is optimization to fit some data. Objective function could be
    a distance function between simulation results and data ; a classical example is the Squared Error function.
    @br

    If you want your model to reproduce several characteristics (sometimes called stylised facts), you need
    several objectives, each of them quantifying the similarity between your model outputs
    and the characteristics you want to reproduce.

    @br@br
    TODO  Un peu relou cet exemple finalement : à virer ?
    For example, if your ideal dynamic is such that one of your model outputs reaches a certain value V
    after a certain time T, in a linear way, the ideal solution reaches  three distinct objectives at the same
    time:
    @ul
        @li
            the given value V
        @li
            the given time T
        @li
            the linear progression of the model output time-serie from (0,0) to (T, V)

    Corresponding function to minimize could be the difference between the target value and the output at time T,
    the difference between target time  T and the simulation time at which the value V is reached by the model output,
    and 1-R² for the quality of the linear adjustment between model outputs  and a linear function from 0,0 to T,V.

    @p

    To calibrate your model, you need to define:

     @ul
        @li
            the @b{genome} of your model, i.e. the parameters to be calibrated. They are the dimensions of the parameter
             space that will be explored by the genetic algorithm. GA will try different genomes, and keep the best
             discovered ever since.
        @li
            the @b{objectives} you want to reach, expressed as  variables to be @b{minimized}.
        @li
            a @b{termination criterion}, to stop the method eventually

@sect{Dummy Model Optimization Example}

    This workflow optimises a dummy model using the generational NSGA II multi-objective algorithm. You can replace the instances of @i{model} by your own model and adapt the variation range of its input variables. If you're not familiar with parameter tuning using Genetic Algorithms (GA), you should first consult the @aa("tutorial explaining how to calibrate a NetLogo model with a GA", href := DocumentationPages.netLogoGA.file).

    @br @hl.openmole(s"""
  $model

  // Construction of the workflow orchestrating the genetic algorithm
  // termination is the termination criterion, here it runs for 100 generations. A time limit could be set as an
  // alternative by replacing 100 by 1 hour (hour is a duration type understood by OpenMOLE).
  // the parallelism specifies how many evaluation are concurrently submitted to the execution environment
  val evolution =
    SteadyStateEvolution(
      // Definition of the optimisation algorithm
      // mu is the size of the population
      // genome is the inputs prototype and their variation ranges
      // objectives are the objectives to minimise
      algorithm =
        NSGA2(
          mu = 100,
          genome = Seq(x in (0.0, 1.0), y in (0.0, 1.0)),
          objectives = Seq(o1, o2)
        ),
        evaluation = model,
        parallelism = 10,
        termination = 100
    )


  // Definition of a hook to save the population of solutions to /tmp/evolution on the local machine running OpenMOLE
  val savePopulation = SavePopulationHook(evolution, workDirectory / "evolution/")

  // Construction of the complete workflow with the execution environment, and the hook.
  // Here the generated workflow will run using 4 threads of the local machine.
  (evolution hook savePopulation on LocalEnvironment(4))""", name = "nsga2 example")

    @br
 TODO Romain: (rappel du contexte) : on avait parlé  d'un moyen de fixer un objectif à atteindre en donnant la valeur en clair dans le script.  Si la task existe , remplacer par la syntaxe courrante le texte ci dessous , en se rappelant   qu'il faut que  ce soit limpide à la lecture du script oms qu'on cible une valeur donnée en argument: reach(42) , target(42) qqch comme ça

    Notice that the objectives are given as a sequence of model outputs variables to @b{minimize}.
So if you want to reach specific target values, like Pi and 42  you can use the DeltaTask an plug it after your model:

    @br @hl.openmole(s"""
  $model

  val evolution =
    SteadyStateEvolution(
      // Definition of the optimisation algorithm
      // mu is the size of the population
      // genome is the inputs prototype and their variation ranges
      // objectives are the objectives to minimise
      algorithm =
        NSGA2(
          mu = 100,
          genome = Seq(x in (0.0, 1.0), y in (0.0, 1.0)),
          objectives = Seq(o1, o2)
        ),
        evaluation = model -- DeltaTask(o1 -> math.Pi, o2 -> 42),
        parallelism = 10,
        termination = 100
    )""", name = "nsga2 delta example")
    @br
    NB: in this case the results in the saved file in will be the difference between the outputs of the model and your objectives.
    @br

    @br
    Obviously, maximization problem are performed by taking the opposite of variables as objectives. You may use a ScalaTask in place of the DeltaTask to perform such a small computations in the workflow.
@br @hl.openmole(s"""
  $model

  val maximize = ScalaTask("o1 = -o1") set ((inputs, outputs) += (o1, o2))

  val evolution =
    SteadyStateEvolution(
      // Definition of the optimisation algorithm
      // mu is the size of the population
      // genome is the inputs prototype and their variation ranges
      // objectives are the objectives to minimise
      algorithm =
        NSGA2(
          mu = 100,
          genome = Seq(x in (0.0, 1.0), y in (0.0, 1.0)),
          objectives = Seq(o1, o2)
        ),
        evaluation = model -- maximize,
        parallelism = 10,
        termination = 100
    )""", name = "nsga2 maximize example")


    @br@br
@sect{Real world Example}
    @a("This tutorial exposes", href:=DocumentationPages.netLogoGA.file)  how to use Genetic Algorithms to perform optimization on a NetlogModel.

