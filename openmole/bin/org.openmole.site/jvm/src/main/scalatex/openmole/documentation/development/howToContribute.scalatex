@import org.openmole.site._
@import org.openmole.site.tools._
@import Resource._
@import DocumentationPages._


@h1
    How To contribute to the OpenMOLE project


@sect{Prerequisites}

    You need three tools installed to get a local copy of OpenMOLE:
    @ul
        @li
            A java 8 @b{jdk} or higher (N.B. not only the JRE). Check your version by typing @hl.highlight("javac -version","plain") in a terminal
        @li
            the @a("git" ,href:=shared.link.git) software
        @li
            @a("sbt" ,href:=shared.link.sbt) , the scala  building tool


    As a suggestion, we recommand the @a("IntelliJ IDE", href:=shared.link.intelliJ) to  edit the scala source code of the project.


@sect{First time setup}

    @ol
        @li
            Clone the OpenMOLE repository : @hl.highlight("""
            git clone git@github.com:openmole/openmole.git
            """, "plain")
         @li
            Set the git submodules inside the openmole subdirectory
        @hl.highlight("""
        cd openmole
        git submodule update --init
        """, "plain")
        @li
            Publish locally the content of the  @hl.highlight("build-system", "plain") and  @hl.highlight("libraries", "plain") subdirectory
        @hl.highlight("""
            cd build-system
           sbt publishLocal
            cd ../libraries/
           sbt publishLocal
           """, "plain")

     These commands may take some time (few minutes at least)



@sect{Build the app}

    To build the OpenMOLE, use the @hl.highlight("sbt assemble","plain") command inside openmole subdirectory.


    @hl.highlight("""
    cd openmole
    sbt assemble
    """, "plain")

    Upon completion, the executable is placed  under @hl.highlight("/openmole/openmole/bin/openmole/target/assemble", "plain")
    and is launched as any executable : @hl.highlight("./openmole", "plain")
    Then, the app should pop up in your default web browser, the URL is something like @hl.highlight("http://localhost:44961/app","plain")



@sect{Build the website}

    The source code of the website and the OpenMOLE's documentation are hosted along in the code repository.
    You might spot a typo/incorrect spelling/grammar mistake/bad wording or simply want to improve a part of the
    documentation you think is unclear.
    If so, you're more than welcome to correct our mistakes and improve the documentation. To check your changes before
     sending us a Pull Request, here is how to build a local copy of the website/documentation.

    @hl.highlight("""
    cd openmole/openmole
    sbt
    """, "plain")

    Once sbt is launched, use the @hl.highlight("buildSite","plain") command inside sbt to build the webpages.
    Location of the generated pages can be set via the @hl.highlight("--target","plain") option, e.g.
    @hl.highlight("""
    buildSite --target /tmp/
    ""","plain")

    @br
    By default, pages are located in @hl.highlight("openmole/openmole/bin/org.openmole.site/jvm/target/site/","plain")

    Updating the git submodules is @b{mandatory the first time} you set up your OpenMOLE development environment.
    It pulls the examples from the MARKETLINK that are necessary to build the documentation website.

    Optionally you can use @hl.highlight("--no-test", "plain") in order to disable the tests of the scripts, which
    is (really) time-consuming. The tests concerning the examples from the OpenMOLE market can in turn be disabled
    using @hl.highlight("--no-market-test", "plain").

@sect{Edit the source of webpages}

    Sources are located in @hl.highlight("openmole/openmole/bin/org.openmole.site/jvm/src/main/scalatex/openmole","plain")

    They are written using @a("scalatex", href:=shared.link.scalatex), a DSL to generate html content.

@sect{Repositories}

    @a("OpenMOLE repos", href:=shared.link.repo.openmole) are divided into three branches.

    @ul
        @li
            @hl.highlight("dev", "plain") contains the unstable, current version  of the platform.
        @li
            @hl.highlight("#version-dev", "plain")  e.g. 7-dev , is the stabilized version of the @hl.highlight("dev", "plain") branch
        @li
            @hl.highlight("master", "plain") is the main branch, from which  the two former branches are derived


@sect{Dev version (site and software)}
    The development version of the OpenMOLE site and software is compiled and distributed several times an hour at @a( "this url", href := "http://next.openmole.org").

@sect{Bug report}
    Please report bugs you may find in OpenMOLE on the @a("bug tracker", href := "https://github.com/openmole/openmole/issues").



@sect{Recommended contribution procedure}
    When you want to contribute to the project (code or documentation) we recommend that you start by submitting an @b{issue}
    , so that the community can identify the nature of the potential caveat.
    @br
    After that , send a @b{pull request} so that your potential changes can be discussed.


@sect{Branching model}
   TODO vérfier si ce model de branchement est encore d'actualité et si c'est bien celui qui est appliqué
  OpenMOLE applies a branching model derived from @a("Vincent Driessen's", href := shared.link.branchingModel). Some slight differences should be noted:
  @ul
	@li{The next version of OpenMOLE is in the master, it's our development branch;}
	@li{Disrupting features are developed in branches, branching off master;}
    @li{New features are merged into the master branch as soon as they are working satisfyingly enough to be operational in the next release;}
	@li{With each release, a maintenance branch is created to be able to patch the last released version, this branch is called version-dev. These are the so-called stable branches for each release;}
	@li{Hotfixes should be developed by branching off the corresponding version-dev branch and merged back into their upstream branch and master.}

  @p The advantage of this model is that new features are tested early in interaction with each others. This scheme serves an hybrid, date-based / feature-based release schedule.

  @p At the beginning of a development cycle, an approximate date is given for the next release. This date depends on what are the new features planned for this milestone. This date is flexible and can be modulated given the progress of the new developments.
