
@import org.openmole.site._
@import org.openmole.site.tools._

Data processing often revolves about massive computation using big bunch of files.


Model inputs come in many shapes; this is why OpenMOLE features some file handlings functions to explore them as easily as possible.

@sect{Exploring a set of files}
    OpenMOLE introduces the concept of @b{Domains} as a variable ranging along a set of files. For instance, to run a program
    over a set of files in a subdirectory you may use:
    @hl.openmole("""
    val f = Val[File]
    val explo = ExplorationTask (f in (workDirectory / "dir"))
    """)
    @br
    To explore files located in several directories:
    @hl.openmole("""
    val i = Val[Int]
    val f = Val[File]

    val explo =
      ExplorationTask (
        (i in (0 to 10)) x
        (f in (workDirectory / "dir").files("subdir${i}", recursive = true).filter(f => f.isDirectory && f.getName.startsWith("exp")))
      )
    """)
    @br
    The filter modifier filters according to some rules, use the filter function .
    You can filter using any function from File (see javadoc) to Boolean, such as hl.highlight("startsWith(), contains(), endsWith() ", "plain").
    @br
    @hl.openmole("""
    val f = Val[File]

    val explo =
      ExplorationTask ( (f in (workDirectory / "dir") filter(_.getName.endsWith(".nii.gz")) ) )
    """)
    @br
    Searching in deep file trees can be very time consuming and irrelevant in some cases where you know how your data is organised.
     By default the file selector only explores the direct level under the directory you've passed as a parameter.
     If you want it to explore the whole file tree, you can set the option recursive to true as in @hl.highlight("files(recursive = true)", "plain").

    @break

    As its name suggests, the files selector manipulates File instances and directly injects them in the dataflow.
    If you plan to delegate your workflow to a local cluster environment equipped with a shared file system across all nodes,
    you don't need data to be automatically copied by OpenMOLE.
    In this case, you might prefer the paths selector instead.
    Paths works exactly like files and accepts the very same options.
    The only difference between the two selectors is that paths will inject @hl.highlight("Path","plain") variables in the dataflow.
    Path describes a file's location but not its content.
    The explored files won't be automatically copied by OpenMOLE in this case, so this does not fit a grid environment for instance.
    @br
    More details on the difference between manipulating Files and Paths can be found in the dedicated entry of the @aa("FAQ", href:=Pages.faq.file).
    @br
    @br
    If you wish to select one single file for each value of i you may use the @hl.highlight("select", "plain") operation:
    @hl.openmole("""
    val i = Val[Int]
    val f = Val[File]

    val explo =
      ExplorationTask (
        (i in (0 to 10)) x
        (f in File("/path/to/a/dir").select("file${i}.txt"))
      )
    """)
    @br
    Files can also be injected in the dataflow through Sources. They provide more powerful file filtering possibilities using regular expressions and can also target directories only.

@sect{CSV files Sampling}
    As an extension to undifferientiated files, you can inject your own sampling in OpenMOLE through a CSV file. Considering a CSV file like:

    @hl.openmole("""
    coldD,  colFileName,    i
    0.7,    fic1,           8
    0.9,    fic2,           19
    0.8,    fic2,           19
    """)
    The corresponding CSVSampling is:
    @hl.openmole("""
    val i = Val[Int]
    val d = Val[Double]
    val f = Val[File]

    //Only comma separated files with header are supported for now
    val s = CSVSampling("/path/to/a/file.csv") set (
      columns += i,
      columns += ("colD", d),
      fileColumns += ("colFileName", "/path/of/the/base/dir/", f),
      // comma ',' is the default separator, but you can specify a different one using
      separator := ','
    )

    val exploration = ExplorationTask(s)
    """)
    @br
    In this example the column @b{i} in the CSV file is mapped to the variable @b{i} of OpenMOLE.
    The column name @b{colD} is mapped to the variable @b{d}. The column named @b{colFileName} is appended to the base directory
    "/path/of/the/base/dir/" and used as a file in OpenMOLE.
    As a sampling, the CSVSampling can directly be injected in an ExplorationTask. It will generate a different task for each entry in the file.


@sect{Particular Use case}
    TODO si Jo a un truc tout fait .