
@import org.openmole.site._
@import Environment._

@sect{Delegation to the EGI grid}
  @a("EGI", href := "http://www.egi.eu/") is a grid infrastructure gathering computing resources from all over the world. It is a very powerful computing environment, but shows technically challenging to use. OpenMOLE makes it very simple to benefit from the grid.

 @sect{Setup your grid credentials}
   Note: The following instructions explain how to setup the EGI authentication in console mode. If you are using the script editor you can configure it directly in the authentication panel.

   @p To delegate a task to EGI you need to register your certificate in OpenMOLE. In the console execute:
   @br @hl.openmole("""
   EGIAuthentication() = P12Certificate(encrypted, "/path/to/your/certificate.p12")""", header = """def encrypted = "" """)

   @p You need to execute this operation only once and for all. OpenMOLE persists this information in your preferences folder.

  @sect{Submitting job to EGI}
    To use EGI through DIRAC you should setup an @hl.openmoleNoTest{EGIAuthentication} as explained above using a P12Certificates. Other methods are not supported by DIRAC. To use EGI you must be registered in a Virtual Organisation (VO). The VO is the only compulsory parameter when creating an EGI environment:
    @br @hl.openmole("""
    val env = EGIEnvironment("biomed")""")
    @p Here the VO @i{biomed} is specified, but you can specify the EGI VO of you choice.

    @p Options available for DIRAC are:
    @ul
      @li{@envOption{cpuTime} the maximum duration for the job in terms of CPU consumption, for instance 1 hour,}
      @li{@openMOLEMemory,}
      @li{@envOption{service} a DIRAC REST API,}
      @li{@envOption{group} the name of the DIRAC group,}
      @li{@envOption{bdii} the BDII to use for listing resources accessible from this VO. The BDII in your preference file is used, when this field is left unspecified.}
      @li{@envOption{vomsURL} the URL of the VOMS server used for the authentication,}
      @li{@envOption{fqan} additional flags for authentication,}
      @li{@envOption{setup} setup to use on the DIRAC server. It is set to "Dirac-Production" by default.}

    @p The @hl.openmoleNoTest{EGIEnvironment} can be tuned using the previous options as in this example:
    @br @hl.openmole("""
      val env =
        EGIEnvironment(
          "biomed",
          cpuTime = 4 hours,
          openMOLEMemory = 200
        )""")
   @sect{Delegate tasks using WMS servers}

    @p If you want / need to use the submission using the legacy WMS servers of EGI you may use:
    @br @hl.openmole("""val env = WMSEnvironment("vo.complex-systems.eu")""")

    @p Many options are available to configure the WMS environment:
    @ul
      @li{@port,}
      @li{@wallTime,}
      @li{@memory,}
      @li{@envOption{architecture} could be "x86_64" for restricting your jobs to 64-bit systems,}
      @li{@envOption{jobType} should be set to "MPI" for MPI jobs,}
      @li{@envOption{cpuNumber} the number of CPU required for your job,}
      @li{@envOption{smpGranularity} the number of cores linked to a shared memory machine (same as cpuNumber for multi-threaded processes),}
      @li{@threads,}
      @li{@envOption{requirements} a requirement string in accordance to the GLUE schema. It will be added to the other requirements,}
      @li{@b{fqan, cpuTime, openMOLEMemory, bdii, vomsURL} are also usable in the same way as for the @a("EGI environment", href := DocumentationPages.root.language.environment.egi.file + "#SubmittingjobtoEGI").}

    @p The @hl.openmoleNoTest{WMSEnvironment} can be tuned using the previous options as in this example:
    @br @hl.openmole("""
      val env =
        WMSEnvironment(
          "biomed",
          cpuTime = 4 hours,
          memory = 2000,
          architecture = "x64_86",
          jobType = "MPI",
          cpuNumber = 8,
          smpGranularity = 1,
          openMOLEMemory = 200
        )""")

