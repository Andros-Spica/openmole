
@import org.openmole.site._

@sect{Compile OpenMOLE}
  This section explains how to compile OpenMOLEÂ from its sources and how to modify the sources. The source code repository can be found @a("here", href := "https://github.com/openmole/openmole").
  @sect{Get the sources}
    OpenMOLE's source code is versioned under @a("git", href :=  "https://en.wikipedia.org/wiki/Git_%28software%29"). You can get the sources as follows:
    @br @hl.highlight("""git clone git@github.com:openmole/openmole.git""", "plain")

    @p The current development versions stands in the master branch.
    
  @sect{Install npm}
    @hl.highlight("""
    sudo apt install npm nodejs-legacy
    """)

  @sect{Compile}
    In order to compile OpenMOLE, you should have @a("SBT", href := "http://www.scala-sbt.org/") and a JDK of version 7 or greater (we strongly recommend the use of the OpenJDK as its corresponding Runtime Environment embeds all the tools required by OpenMOLE). Here are the steps to compile OpenMOLE from a fresh clone:
    @br @hl.highlight("""
    cd build-system
    sbt publish-local
    cd ../libraries
    sbt publish-local
    cd ../openmole
    optionally: sbt clean
    sbt assemble""", "plain")
    @p You can now find the application in bin/openmole/target/assemble/.
    @p To compile offline (plain / train...) you should use: @hl.highlight("""set offline in Global := true""", "plain") when in the sbt shell, or start sbt with the @i{-offline} option.
  @sect{Develop}
    @p The OpenMOLE development team generally uses the community version of @a("IntelliJ", href := "http://www.jetbrains.com/idea/").
    Once deployed you should install the SBT and Scala plugins. You can then create an IntelliJ project containing the
    OpenMOLE's folder hierarchy by clicking on the "Import Project" button in IntelliJ. Browse to the folder
    @i{openmole/openmole} and click import.

    @p OpenMOLE is made of three different projects:
      @ul
        @li{ @i{openmole/openmole}: the main project containing the source code for the core and plugins }
        @li{ @i{openmole/libraries}: contains the libraries which OpenMOLE depends on but are not available as OSGi bundles from their developers. This project takes all these dependencies, wraps them in OSGi projects and generates the corresponding bundles to be later imported by OpenMOLE's main project.}
        @li{ @i{openmole/build-system}: As its name stands, that's the build system :) It's very unlikely that you'll have to modify this project.}

  @sect{Create a standalone archive}
    You can create a standalone archive of your fresh OpenMOLE build and ship it around by using the task @i{openmole:tar}:
    @br @hl.highlight("""sbt openmole:tar""", "plain")
    @p You will find the resulting archive in @i{bin/openmole/target/openmole.tar.gz}.
  @sect{Publish the bundles}
    @hl.highlight("""
    cd build-system
    sbt publish
    cd ../libraries
    sbt publish
    cd ../openmole
    sbt publish""", "plain")