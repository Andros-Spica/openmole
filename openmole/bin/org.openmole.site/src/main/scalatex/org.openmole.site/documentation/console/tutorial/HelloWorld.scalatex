
@import org.openmole.site.DocumentationPages._
@import org.openmole.site.Objects._

@def tasks = """
  // Define the variables that are transmitted between the tasks
  val i = Val[Double]
  val res = Val[Double]

  // Define the design of experiment
  val exploration = ExplorationTask(i in (0.0 to 100.0 by 1.0))

  // Define the model, here it is a simple task executing "res = i * 2", but it can be your model
  val model =
    ScalaTask("val res = i * 2") set (
      inputs += i,
      outputs += (i, res)
    )"""

@sect{An OpenMOLEÂ Hello World!}
  Let's design a Console workflow that explores one variable multiplies it by 2 and then displays each result. The
  computation is executed in a multi-threaded environment on the local machine.

  @br @hl.openmole(s"""
  $tasks

  // Define the execution environment, here it is a local execution environment with 4 threads but
  // it could be a remote cluster or a grid.
  // The workflow will work the same way with no installation step required on the execution environment.
  val env = LocalEnvironment(4)

  // Define and start the workflow
  val ex = exploration -< (model on env hook ToStringHook()) start
  """)

  @p Distributing the execution of the exact same code to a remote cluster only requires to switch the
  environment definition.

  @br @hl.openmole(s"""
  // All you need is an account on the cluster.
  // You should also provide your authentication to OpenMOLE as explained in the specific section for each environment.
  val env = SLURMEnvironment("myLogin", "cluster.iscpif.fr")

  // Define and start the workflow
  val ex = exploration -< (model on env hook ToStringHook()) start
  """, header = tasks)

  @p This is just a tiny bit of what OpenMOLE can achieve! Discover how to:
  @ul
    @li{define your environment in the @a("environment documentation", href := root.console.environment.file),}
    @li{include your program in the @a("task documentation", href := root.console.task.file),}
    @li{describe you design of experiments in the @a("sampling documentation", href := root.console.sampling.file).}