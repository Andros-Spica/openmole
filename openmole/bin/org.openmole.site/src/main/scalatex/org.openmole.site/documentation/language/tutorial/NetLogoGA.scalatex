
@import org.openmole.site.Objects._
@import org.openmole.site.Resource
@import org.openmole.site.DocumentationPages._

@def model = """
    // Define the input variables
    val gPopulation = Val[Double]
    val gDiffusionRate = Val[Double]
    val gEvaporationRate = Val[Double]
    val seed = Val[Int]

    // Define the output variables
    val food1 = Val[Double]
    val food2 = Val[Double]
    val food3 = Val[Double]

    // Define the NetlogoTask


    val cmds = Seq("random-seed ${seed}", "run-to-grid")
    val ants =
      NetLogo5Task("Ants.nlogo", cmds) set (
        // Map the OpenMOLE variables to NetLogo variables
        netLogoInputs += (gPopulation, "gpopulation"),
        netLogoInputs += (gDiffusionRate, "gdiffusion-rate"),
        netLogoInputs += (gEvaporationRate, "gevaporation-rate"),
        netLogoOutputs += ("final-ticks-food1", food1),
        netLogoOutputs += ("final-ticks-food2", food2),
        netLogoOutputs += ("final-ticks-food3", food3),
        // The seed is used to control the initialisation of the random number generator of NetLogo
        inputs += seed,
        // Define default values for inputs of the model
        seed := 42,
        gPopulation := 125.0,
        gDiffusionRate := 50.0,
        gEvaporationRate := 50
      )"""

@def replication = """
    val modelCapsule = Capsule(ants)

    // Define the output variables
    val medNumberFood1 = Val[Double]
    val medNumberFood2 = Val[Double]
    val medNumberFood3 = Val[Double]

    // We compute three median
    val statistic =
      StatisticTask() set (
        statistics += (food1, medNumberFood1, median),
        statistics += (food2, medNumberFood2, median),
        statistics += (food3, medNumberFood3, median)
      )

    val statisticCapsule = Capsule(statistic)

    val seedFactor = seed in (UniformDistribution[Int]() take 5)
    val replicateModel = Replicate(modelCapsule, seedFactor, statisticCapsule)"""

@sect{Calibrating a NetLogo model using Genetic Algorithms}
  This example presents step by step how to explore a NetLogo model with an Evolutionary/Genetic Algorithm (EA/GA) in
  OpenMOLE.
  @br For more generic details regarding the exploitation of Genetic Algorithms using OpenMOLE, you can check the
  @a("GA section of the methods documentation", href := root.language.method.file + "#Geneticalgorithms").

  @sect{The ant model}
    We demonstrate this tutorial using the ants foraging model present in the Netlogo library. This model was created by
    Ury Wilensky. According to @a("NetLogo's website", href := "http://ccl.northwestern.edu/netlogo/models/Ants"),
    this model is described as:
    @br @i{In this project, a colony of ants forages for food. Though each ant follows a set of simple rules, the colony
    as a whole acts in a sophisticated way. When an ant finds a piece of food, it carries the food back to the nest,
    dropping a chemical as it moves. When other ants “sniff” the chemical, they follow the chemical toward the food. As
    more ants carry food to the nest, they reinforce the chemical trail.}

    @p A visual representation of this model looks like that:
    @br @img(src := Resource.ants.file)

    @p In this tutorial we use @a("a headless version", href := root.tutorial.headlessNetLogo.file) of the
    model. This modified version is available @a("here", href := Resource.antsNLogo.file).

  @sect{Define the problem to solve as an optimisation problem}
    This model manipulates three parameters:
    @ul
      @li{Population: number of Ants in the model,}
      @li{Evaporation-rate: controls the evaporation rate of the chemical,}
      @li{Diffusion-rate: controls the diffusion rate of the chemical.}

    @p Ants forage from three sources of food (see the number in the picture below). Each source is positioned at
    different distances from the Ant colony.
    @br @img(src := Resource.antNumbers.file)

    @p It can be interesting to search the best combination of the two parameters evaporation-rate and diffusion-rate
    which minimises the eating time of each food source.

    @p To build our fitness function, we modify the NetLogo Ants source code to store for each food source the first ticks
    indicating that this food source is empty.

    @p @hl.highlight("""
    to compute-fitness
      if ((sum [food] of patches with [food-source-number = 1] = 0) and (final-ticks-food1 = 0)) [
        set final-ticks-food1 ticks ]
      if ((sum [food] of patches with [food-source-number = 2] = 0) and (final-ticks-food2 = 0)) [
        set final-ticks-food2 ticks ]
      if ((sum [food] of patches with [food-source-number = 3] = 0) and (final-ticks-food3 = 0)) [
        set final-ticks-food3 ticks ]
    end""", "plain")

    @p At the end of each simulation we return the values for the three objectives :
    @ul
      @li{The simulation ticks indicating that source 1 is empty,}
      @li{The simulation ticks indicating that source 2 is empty,}
      @li{The simulation ticks indicating that source 3 is empty.}

    @p The combination of the three objectives indicates the quality of the parameters used to run the simulation.
    This situation is a
    @a("multi-objective optimisation", href := "http://en.wikipedia.org/wiki/Multiobjective_optimization") problem. In
    case there is a compromise between these 3 objectives, we will obtain a
    @a("Pareto frontier", href := "http://en.wikipedia.org/wiki/Pareto_efficiency") at the end of the optimisation
    process.


  @sect{Getting the ant model to run in OpenMOLE}
    When building a calibration or optimisation workflow, the first step is to make the model run in
    OpenMOLE. This script simply embeds the NetLogo model and runs one single execution of the model with arbitrary
    parameters. More details about the NetLogo5 task used in this script can be found in
    @a("this section of the documentation", href := DocumentationPages.root.language.task.netLogo.file).

    @hl.openmole(s"""
    $model

    // Define the hooks to collect the results
    val displayHook = ToStringHook(food1, food2, food3)

    // Start a workflow with 1 task
    val ex = (ants hook displayHook) start
    """)

    @p The result of this execution should look like:
    @br @hl.highlight("{food1=746.0, food2=1000.0, food3=2109.0}", "plain")

  @sect{Managing the stochasticity}
    @p Generally agents models are stochastic. It means that their execution depends on the realisation of random
    variates. This makes their output variables random variates as well. These random variates can be studied by
    estimating their distribution.

    @p Getting one single realisation of the output random variates doesn’t provide enough information to estimate
    their distribution. As a consequence, the model must be executed several times, with different random sources.
    All these executions should be statistically independent to ensure the independent realisation of the model's output
    random variates. This operation is called “replications”.

    @p OpenMOLE provides the necessary mechanisms to easily replicate executions and aggregate the results using a
    simple statistical descriptor. The following script executes the ants model 5 times, and computes the median of each
    output. The median is a statistical descriptor of the outputs of the model (however, the form of the distribution
    remains unknown).

    @p Replicating a stochastic experiment only 5 times is generally unreliable. 5 is here an arbitrary
    choice to reduce the global execution time of this toy example.

    @br @hl.openmole(s"""
    $replication

    // Define the hooks to collect the results
    val displayOutputs = ToStringHook(food1, food2, food3)
    val displayMedians = ToStringHook(medNumberFood1, medNumberFood2, medNumberFood3)

    // Execute the workflow
    val ex = replicateModel + (modelCapsule hook displayOutputs) + (statisticCapsule hook displayMedians) start
    """, header = model)

    @p This execution should display the output values for each model execution and the medians of this values. Note
    that the values of the outputs will differ each time since the seeds are randomly generated by OpenMOLE.

    @br @hl.highlight("""
    {food1=727.0, food2=1243.0, food3=1910.0}
    {food1=679.0, food2=1178.0, food3=2100.0}
    {food1=550.0, food2=1026.0, food3=2014.0}
    {food1=610.0, food2=1176.0, food3=1858.0}
    {food1=650.0, food2=1389.0, food3=1810.0}
    {medNumberFood1=650.0, medNumberFood2=1178.0, medNumberFood3=1910.0}
    """, "plain")

  @sect{The optimisation algorithm}
    Now that we have estimators of the output distribution, we will try to find the parameter settings minimising these
    estimators. This script describes how to use the NSGA2 multi-objective optimisation algorithm in OpenMOLE. The
    result files are written to @hl.highlight("/tmp/ants", "plain").

    @br @hl.openmole("""
    // Define the population (10) and the number of generations (100).
    // Define the inputs and their respective variation bounds.
    // Define the objectives to minimize.
    // Assign 1 percent of the computing time to reevaluating
    // parameter settings to eliminate over-evaluated individuals.
    val evolution =
      NSGA2(
        mu = 10,
        termination = 100,
        inputs = Seq(gDiffusionRate -> (0.0, 99.0), gEvaporationRate -> (0.0, 99.0)),
        objectives = Seq(medNumberFood1, medNumberFood2, medNumberFood3),
        reevaluate = 0.01
      )

    // Define a builder to use NSGA2 generational EA algorithm.
    // replicateModel is the fitness function to optimise.
    // lambda is the size of the offspring (and the parallelism level).
    val (puzzle, nsga2) =
      GenerationalGA(evolution)(
        replicateModel,
        lambda = 10
      )

    // Define a hook to save the Pareto frontier
    val savePopulationHook = SavePopulationHook(nsga2, "/tmp/ants/")

    // Define another hook to display the generation in the console
    val display = DisplayHook("Generation ${" + nsga2.generation.name + "}")

    // Plug everything together to create the workflow
    val ex = (puzzle hook savePopulationHook hook display) start""", header = model + replication)

  @sect{Scale up}
    If you use distributed computing, it might be a good idea to opt for an Island model. Islands are better suited to
    exploit distributed computing resources than classical generational genetic algorithms. See how the end of the
    script changes to implement islands in the workflow. Here we compute 2,000 islands in parallel, each running during
    1 hour on the European grid:
    @br @hl.openmole("""
    // Define the population (200) and the computation time (1h)
    // The remaining is the same as above
    val evolution =
      NSGA2(
        mu = 200,
        termination = Timed(1 hour),
        inputs = Seq(gDiffusionRate -> (0.0, 99.0), gEvaporationRate -> (0.0, 99.0)),
        objectives = Seq(medNumberFood1, medNumberFood2, medNumberFood3),
        reevaluate = 0.01
      )

    // Define the island model with 2,000 concurrent islands. Each island gets 50 individuals sampled from the global
    // population. The algorithm stops after 200,000 islands evaluations.
    val (puzzle, ga) = IslandSteadyGA(evolution)(replicateModel, 2000, 200000, 50)

    val savePopulationHook = SavePopulationHook(ga, "/tmp/ants/")
    val display = DisplayHook("Generation ${" + ga.generation.name + "}")

    // Define the execution environment
    val env = EGIEnvironment("biomed", openMOLEMemory = 1200, wallTime = 4 hours)

    // Define the execution
    val ex =
      (puzzle on env hook savePopulationHook hook display) start""", header = model + replication)