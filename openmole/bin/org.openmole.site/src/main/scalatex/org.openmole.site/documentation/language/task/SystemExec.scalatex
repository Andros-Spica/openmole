
@import org.openmole.site.Objects._

@sect{Embed external applications (C, C++, Python, R, Scilab...)}

  In OpenMOLE, a generic task named @hl.openmole("SystemExecTask") offers to run external applications.

  @p It has been designed to embed native binaries such as programs compiled from C, C++, Fortran, Scilab, R... For that
  you just need to ensure you program is executable on a Linux computer. Embedding an application in a
  @hl.openmole("SystemExecTask") happens in 2 phases.

  @p @b{First} you should package your application so that it executes on any Linux environment. @b{Second}, you should
  provide the resulting package along with some other information to OpenMOLE.

  @p The easiest way to package your executable is to use @a("CARE", href := "http://reproducible.io/"). CARE makes it
  possible to package your application from any Linux computer, and then re-execute it on any other Linux computer. The
  CARE / OpenMOLE pair is a very efficient way to distribute your application on a very large scale with very little
  effort.

  @p Let's study two concrete use cases of packaging an existing application with CARE, in order to embed it in
  OpenMOLE. You should be able to achieve exactly the same process with almost any executable running on Linux.

  @sect{An example with R}

    Our first example R script contained in a file @i{myscript.R}. We want to distribute the execution of this R code
    to the grid.

    @p First your script should run in headless mode with no input required from the user during the execution. Your script
    should produce files or write its results to the standard output so that OpenMOLE can bring them back from the
    remote execution environment.

    @p Here is an example R script matching these criteria:
    @br @hl.highlight("""
      print(commandArgs(trailingOnly = TRUE))
      data<-read.csv("data.csv",header=T,sep=",")
      write.csv(data,"results.csv")""", "R")

    @p This script starts by displaying its command line arguments. Then it reads a file called @i{data.csv} and
    produces an output file called @i{results.csv}. To call this script from the command line you should type:
    @hl.highlight("R -f myscript.R --slave --args 42", "plain"), considering you have @i{R} installed on your system.

    @p Once the script is up and running, remember that the first step to run it from OpenMOLE is to package it. This
    is done using CARE on your system.
    @br @hl.highlight("""./care -r /home/reuillon/ -o care.bin R -f myscript.R --slave --args 42""", "plain")

    @p Notice how the command line is identical to the original one. The call to the @i{R} script remains unchanged,
    as CARE and its options are inserted at the beginning of the command line.

    @p A @i{care.bin} file is created. It is an archive containing a portable version of your execution. It can be
    extracted and executed on any other Linux platform.

    @p The method described here packages everything, including @i{R} itself! Therefore there is no need to install
    @i{R} on the target execution machine. All that is needed is the remote execution host runs Linux, which is the
    case for the vast majority of high performance computing environments.

    @p Packaging an application is done @b{once and for all} by running the original application against CARE. CARE's
    re-execution mechanisms allows you to change the original command line when re-running your application. This way
    you can update the parameters passed on the command line and the re-execution will be impacted accordingly. As long
    as all the configuration files, libraries, ... have been used during the original execution, there is no need to
    package the application multiple times with different input parameters.

    @p Let's now use this portable archive to explore a complete combination of data files with OpenMOLE. The input data
    files are located in @i{data} and the result files are written to @i{results} A second input parameter is
    an integer @i{i} ranging from 1 to 10. The corresponding OpenMOLE script looks like this:
    @p @hl.openmole("""
    // Declare the variable
    val i = Val[Int]
    val input = Val[File]
    val inputName = Val[String]
    val output = Val[File]

    // R task
    // "path/on/your/system" is a path on the original system on which you packaged R
    val rTask = SystemExecTask("./care.bin", "./care/re-execute.sh R --slave -f myscript.R --args ${i}") set (
      resources += workDirectory / "care.bin",
      inputs += (i, inputName),
      inputFiles += (input, "care/rootfs/path/on/your/system/data.csv"),
      outputs += (i, inputName),
      outputFiles += ("care/rootfs/path/on/your/system/result.csv", output)
    )

    val exploration =
      ExplorationTask(
        (i in (1 to 10)) x
        (input in ListFilesDomain(workDirectory / "data") zipWithName inputName)
      )

    val copy = CopyFileHook(output, workDirectory / "result-${inputName}-${i}.csv")
    exploration -< (rTask hook copy hook ToStringHook())""")

  @p The @hl.openmole("SystemExecTask") performs two calls: it first unarchives the CARE container by running
  @hl.highlight("care.bin", "plain"). Then the actual execution takes place as a second command. It is an important
  feature of the @hl.openmole("SystemExecTask") that can run several commands sequentially
  @hl.openmole("SystemExecTask") when they have been passed as successive parameters to the
  @hl.openmole("SystemExecTask") builder.

  @p Note that for each execution of the @i("SystemExecTask"), OpenMOLE creates a separate work directory in which it copies the resources and the inputs files. On Linux, all commands starting with @i("./") relate to an executable deployed in the work directory and simple commands such as @("mkdir directory") uses the mkdir command already present on the execution node.

  @p Several notions from OpenMOLE are reused in this example. If you're not too familiar with
  @a("Hooks", href := DocumentationPages.root.language.hook.file) or
  @a("Samplings", href := DocumentationPages.root.language.sampling.file), check the relevant sections of the
  documentation.

  @sect{Another example with a Python script}

    @p This example differs from the first one in that it packages the original application to an alternative CARE
    archive format. Here, the archive is a plain folder which allows tweaking the content of the archive more easily.
    This can quite useful when files must be added/removed to/from the archive without having to re-package it again.
    Likewise, the original python script can be modified within the archive to fix a bug or apply a new feature, again
    without the need to re-run CARE.

    @p The toy Python script for this test case is:
    @br @hl.highlight("""
    import sys with open(sys.argv[2], 'w') as f:
    f.write(sys.argv[1])
    exit(0)""", "python")

    @p This script is saved to @i{hello.py}. We first package it using CARE:
    @hl.highlight("""care -o hello.bin python hello.py 42 test.txt""", "plain")

    @p The trailing @b{'/'} character is extremely important in this case as it indicates CARE to use the plain folder
    format for the archive. With the plain folder archiving format, you can browse and modify the resulting folder
    @i{hello_archive} as any other folder on your system.

    @p We can now run it in OpenMOLE using the following script:
    @br @hl.openmole("""
    // Declare the variable
    val arg = Val[Int]
    val output = Val[File]

    // python task
    val pythonTask =
      SystemExecTask("./hello.bin", "./hello/re-execute.sh python hello.py ${arg} output.txt") set (
        resources += workDirectory / "hello.bin",
        inputs += arg,
        outputFiles += ("hello/rootfs/path/on/your/system/output.txt", output),
        outputs += arg
      )

    val exploration = ExplorationTask(arg in (0 to 10))

    val copy = CopyFileHook(output, workDirectory / "hello${arg}.txt")
    val env = LocalEnvironment(4)
    exploration -< (pythonTask hook copy on env by 2)""")

   @p Again notions from OpenMOLE are reused in this example. If you're not too familiar with
@a("Environments", href := DocumentationPages.root.language.environment.file) or @i{Groupings}, check the relevant
  sections of the documentation.

  @sect{Executing remote commands}
    @p The typical behaviour of OpenMOLE is to embed all it needs to run an application on a remote enviromment. However,
    some use cases might benefit from running commands present on the remote host. Typically, a task might want to list the
    content of a directory using the classic @hl.highlight("ls", "plain"). It is quite standard for such tools to be
    installed remote hosts and we don't want to embed our own version along with the OpenMOLE runtime.

    @p By default, the @hl.openmoleNoTest("SystemExecTask") will look up commands in the default path of the execution host.
    A call to @hl.highlight("ls", "plain") will thus call the @hl.highlight("ls", "plain") binary installed on the
    execution, typically @hl.highlight("/bin/ls", "plain").

    @p In the case of resources, embedded binaries are copied to the task's work directory by default. In order to make
    sure OpenMOLE finds the content of a @hl.openmoleNoTest("SystemExecTask")'s resource,
    you should always prefix such calls with @hl.highlight("./", "plain").

    @p Building on top of the previous example, we can insert a call to a remote @hl.highlight("/bin/ls", "plain") in
    between the calls to the embedded resource:
    @br @hl.openmole("""
    val pythonTask =
      SystemExecTask("./hello.bin", "ls ./hello", "./hello/re-execute.sh python hello.py ${arg} output.txt") set (
        resources += workDirectory / "hello.bin",
        inputs += arg,
        outputFiles += ("hello/rootfs/path/on/your/system/output.txt", output),
        outputs += arg
      )
    """)

  @sect{Advanced features}
    @p The SystemExecTask can be customised to fit the needs of an specific application. Some applications disregarding
    standards might not return the expected 0 code upon completion. The return code is used by OpenMOLE to determine
    whether the task executed successfully, or needs to be re-executed.

    @p Setting the boolean flag @hl.openmoleNoTest("errorOnReturnCode") to @i{false} will prevent OpenMOLE from
    re-scheduling a SystemExecTask that have reported a return code different from 0.

    @p Another default behaviour is to print the standard and error outputs of each task in the OpenMOLE console. Such
    raw prints might not be suitable when a very large number of tasks is involved or that further processing are to be
    performed on the outputs. A SystemExecTask's standard and error outputs can be assigned to OpenMOLE variable and
    thus injected in the dataflow by summoning respectively the @hl.openmoleNoTest("stdOut") and
    @hl.openmoleNoTest("stdErr") actions on the task.

    @p The following snippets creates a task that employs the features described in this section:
    @br @hl.openmole("""
      // Declare the variable
      val output = Val[String]
      val error  = Val[String]

      // Any task
      val pythonTask =
        SystemExecTask("python hello.py") set (
          resources += workDirectory / "hello.py",
          stdOut := output,
          stdErr := error,
          errorOnReturnCode := false
        )""")

    @p You will note that these options are set using the @hl.openmoleNoTest(":=") operator. Also, the OpenMOLE
    variables containing the standard and output errors are automatically marked as outputs of the tasks. As a
    consequence, manually adding these variables to the outputs of the task would generate an error would when the
    workflow was built.

  @sect{Troubleshooting}

  @p You should always try to re-execute your application outside of OpenMOLE first. This allows you to ensure the
  packaging process with CARE was successful. If something goes wrong at this stage, you should check the official
  @a("CARE documentation", href := "http://reproducible.io/") or the archives of the
  @a("CARE mailing list", href := "https://groups.google.com/forum/?fromgroups#!forum/reproducible").

  @p If the packaged application re-executes as you'd expect, but you still struggle to embed it in OpenMOLE, then get
  in touch with our user community via our the @a("OpenMOLE user mailing-list", href := "http://list.openmole.org/").
