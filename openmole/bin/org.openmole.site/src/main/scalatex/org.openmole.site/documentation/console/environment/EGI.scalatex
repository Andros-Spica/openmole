
@import org.openmole.site.Objects._

@sect{Delegation to the EGI grid}
  @a("EGI", href := "http://www.egi.eu/") is a grid infrastructure gathering computing resources from all over the world. It is a very powerful computing environment, but shows technically challenging to use. OpenMOLE makes it very simple to benefit from the grid.

 @sect{Setup your grid credentials}
   To delegate a task to EGI you need to register your certificate in OpenMOLE. In the console execute:
   @br @hl.openmole("""
   EGIAuthentication() = P12Certificate(encrypted, "/path/to/your/certificate.p12")""", header = """def encrypted = "" """)

   @p You need to execute this operation only once and for all. OpenMOLE persists this information in your preferences folder.
   @p PEM certificates and X509 proxy files are the two other certificate types available:
   @br @hl.openmole("""
   //For pem
   EGIAuthentication() = PEMCertificate(encrypted, "/path/to/the/cert", "/path/to/the/key")

   //For proxy file
   EGIAuthentication() = ProxyFile("/path/to/the/proxy")""", header = """def encrypted = "" """)

  @sect{Delegate tasks to EGI}
    To use EGI you must be registered in a Virtual Organisation (VO). The VO is the only compulsory parameter when creating an EGI environment:
    @br @hl.openmole("""
    val env = EGIEnvironment("biomed")""")
    @p Here the VO @i{biomed} is specified, but you can specify the EGI VO of you choice.
    @p Many options are available to configure the EGI environment:
    @ul
      @li{cpuTime: the maximum duration for the job in terms of CPU consumption, for instance 1 hour,}
      @li{@wallTime,}
      @li{@memory,}
      @li{@openMOLEMemory,}
      @li{architecture: could be "x86_64" for restricting your jobs to 64-bit systems,}
      @li{jobType: should be set to "MPI" for MPI jobs,}
      @li{cpuNumber: the number of CPU required for your job,}
      @li{smpGranularity: the number of cores linked to a shared memory machine (same as cpuNumber for multi-threaded processes),}
      @li{@threads,}
      @li{requirements: a requirement string in accordance to the GLUE schema. It will be added to the other requirements,}
      @li{bdii: the BDII to use for listing resources accessible from this VO. The BDII in your preference file is used, when this field is left unspecified.}
      @li{vomsURL: the URL of the VOMS server used for the authentication,}
      @li{fqan: additional flags for authentication.}

    @p The EGIEnvironment can be tuned using the previous options as in this example:
    @br @hl.openmole("""
    val env =
      EGIEnvironment(
        "biomed",
        cpuTime = 4 hours,
        memory = 2000,
        architecture = "x64_86",
        jobType = "MPI",
        cpuNumber = 8,
        smpGranularity = 1,
        openMOLEMemory = 200
      )""")
  @sect{DIRAC}
    To use EGI through DIRAC you first need to set up you DIRAC authentication with a P12Certificate:
    @br @hl.openmole("""
    DIRACAuthentication() = P12Certificate(encrypted, "/path/to/your/certificate.p12")""", header = """def encrypted = "" """)

    @p Then you can declare a DIRAC environment by providing the VO name and the URL of the DIRAC REST endpoint:
    @br @hl.openmole("""
    val env =
      DIRACEnvironment(
        "biomed",
        "https://ccdirac06.in2p3.fr:9178")""")

    @p Options available for DIRAC are:
    @ul
      @li{group: the name of the DIRAC group,}
      @li{fqan, cpuTime, openMOLEMemory, bdii, vomsURL are also usable in the same way as for the EGI environment. Please note that the notion of cpuTime is different in the DIRAC standard (see DIRAC doc),}
      @li{setup: setup to use on the DIRAC server. It is set to "Dirac-Production" by default.}

