
@import Resource._
@import Objects._
@import org.openmole.site.DocumentationPages._
@import org.openmole.site.Objects._


@def tasks = """
  // Define the variables that are transmitted between the tasks
  val i = Val[Double]
  val res = Val[Double]

  // Define the design of experiment
  val exploration = ExplorationTask(i in (0.0 to 100.0 by 1.0))

  // Define the model, here it is a simple task executing "res = i * 2", but it can be your model
  val model =
    ScalaTask("val res = i * 2") set (
      inputs += i,
      outputs += (i, res)
    )"""

@def localScript = s"""
$tasks

  // Define the execution environment, here it is a local execution environment with 4 threads but
  // it could be a remote cluster or a grid. The workflow will work the same way whatever the environment
  // and no installation step is required on the execution environment.
  val env = LocalEnvironment(4)
  """

@sect{Launch}

  The version @version - @b{@name} - of OpenMOLE is available @a("here", href := openmole.file). It was released on @generationDate.

  @p OpenMOLE requires that Java version 7 or above is installed and available on your computer. Then just extract the archive, and you're done! OpenMOLE is installed and works out of the box!

  @p Once installed you can launch OpenMOLE by executing the @i{openmole} file in the installation directory (it is called @i{openmole.bat} for windozers). It will bring up the OpenMOLE graphical interface that runs in your navigator (OpenMOLE supports Firefox and Chrome). Instructions to launch the pure console interface (basically @i{openmole -c}) are available in the @a("console documentation", href := DocumentationPages.root.console.file) section.

@sect{First workflow}
  Let's design a workflow that explores one variable multiplies it by 2 and then displays each result. The computation is executed in a multi-threaded environment on the local machine.

  @p In the graphical interface, first create a file named @i{example.oms} (the file extension is important). Open it and write the following workflow:

  @br @hl.openmole(s"""
  $localScript
  // Define the workflow
  exploration -< (model on env hook ToStringHook())""")

  @p You can run it by clicking on the execution button. If you want to use the console mode of OpenMOLE you should use this last line in order to start the workflow:

    @br @hl.openmole(s"""
  // Define and start the workflow
  val wf = exploration -< (model on env hook ToStringHook()) start""", header = localScript)



  @p To distribute the exact same execution to a remote cluster just switch the environment definition. The only configuration step required for this to work is to have an account on the cluster and to provide your authentication to OpenMOLE. Configuring authentications is explained in the GUI documenation LINK and in the console documentation in the section dedicated to each @a("environment", href := root.console.environment.file).

  @br @hl.openmole(s"""
  val env = SLURMEnvironment("myLogin", "cluster.iscpif.fr")

  // Define the workflow
  exploration -< (model on env hook ToStringHook())""", header = tasks)

  @p This is just a tiny bit of what OpenMOLE can achieve! Now you might want to discover how to:
  @ul
    @li{include your program in the @a("task documentation", href := root.console.task.file),}
    @li{define your environment in the @a("environment documentation", href := root.console.environment.file),}
    @li{describe your design of experiments in the @a("sampling documentation", href := root.console.sampling.file).}